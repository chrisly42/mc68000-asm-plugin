/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.platon42.intellij.plugins.m68k.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.platon42.intellij.plugins.m68k.lexer.LexerUtil.*;
import static de.platon42.intellij.plugins.m68k.psi.M68kTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NOSOL = 2;
    public static final int INSTRPART = 4;
    public static final int ASMINSTR = 6;
    public static final int ASMOPS = 8;
    public static final int ASMOPS_OP = 10;
    public static final int ASSIGNMENT = 12;
    public static final int EXPR = 14;
    public static final int EXPR_OP = 16;
    public static final int MACROCALL = 18;
    public static final int WAITEOL = 20;
    public static final int MACRODEF = 22;
    public static final int MACROLINE = 24;
    public static final int MACROTERMINATION = 26;
    public static final int MACROWAITEOL = 28;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 14464 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                    "\53\4\14\1\54\12\11\1\55\u0381\11");

    /* The ZZ_CMAP_Y table has 2944 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\7" +
                    "\13\1\15\24\13\1\16\1\17\1\20\10\1\1\21\1\22\1\13\1\23\4\13\1\24\10\13\1\25" +
                    "\12\13\1\26\1\13\1\27\1\26\1\13\1\30\4\1\1\13\1\31\1\32\2\1\2\13\1\31\1\1" +
                    "\1\33\1\26\5\13\1\34\1\35\1\36\1\1\1\37\1\13\1\1\1\40\5\13\1\41\1\42\1\43" +
                    "\1\13\1\31\1\44\1\13\1\45\1\46\1\1\1\13\1\47\4\1\1\13\1\50\4\1\1\51\2\13\1" +
                    "\52\1\1\1\53\1\54\1\26\1\55\1\56\1\57\1\60\1\61\1\62\1\54\1\17\1\63\1\56\1" +
                    "\57\1\64\1\1\1\65\1\66\1\67\1\70\1\23\1\57\1\71\1\1\1\72\1\54\1\73\1\74\1" +
                    "\56\1\57\1\71\1\1\1\62\1\54\1\42\1\75\1\76\1\77\1\100\1\1\1\72\1\66\1\1\1" +
                    "\101\1\37\1\57\1\52\1\1\1\102\1\54\1\1\1\103\1\37\1\57\1\104\1\1\1\61\1\54" +
                    "\1\105\1\101\1\37\1\13\1\106\1\61\1\107\1\54\1\110\1\111\1\112\1\13\1\113" +
                    "\1\114\1\1\1\66\1\1\1\26\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121\1\122" +
                    "\1\123\1\124\2\1\1\72\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2\13\1" +
                    "\31\1\130\1\116\1\131\1\132\1\133\1\134\1\116\2\13\1\135\2\13\1\136\24\13" +
                    "\1\137\1\140\2\13\1\137\2\13\1\141\1\142\1\14\3\13\1\142\3\13\1\31\2\1\1\13" +
                    "\1\1\5\13\1\143\1\26\45\13\1\144\1\13\1\145\1\31\4\13\1\31\1\146\1\147\1\17" +
                    "\1\13\1\17\1\13\1\17\1\147\1\72\3\13\1\150\1\1\1\151\1\116\2\1\1\116\5\13" +
                    "\1\30\1\152\1\13\1\153\4\13\1\41\1\13\1\154\2\1\1\66\1\13\1\155\1\156\2\13" +
                    "\1\157\1\13\1\100\1\116\2\1\1\13\1\114\3\13\1\156\2\1\2\116\1\160\5\1\1\111" +
                    "\2\13\1\150\1\161\1\116\2\1\1\162\1\13\1\163\1\43\2\13\1\41\1\1\2\13\1\150" +
                    "\1\1\1\164\1\43\1\13\1\155\1\47\5\1\1\165\1\166\14\13\4\1\21\13\1\143\2\13" +
                    "\1\143\1\167\1\13\1\155\3\13\1\170\1\171\1\172\1\126\1\171\1\173\1\1\1\174" +
                    "\2\1\1\175\1\1\1\176\1\1\1\126\6\1\1\177\1\200\1\201\1\202\1\203\3\1\1\204" +
                    "\147\1\2\13\1\154\2\13\1\154\10\13\1\205\1\206\2\13\1\135\3\13\1\207\1\1\1" +
                    "\13\1\114\4\210\4\1\1\130\35\1\1\211\2\1\1\212\1\26\4\13\1\213\1\26\4\13\1" +
                    "\136\1\111\1\13\1\155\1\26\4\13\1\154\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1" +
                    "\41\4\1\135\13\1\41\2\1\10\13\1\126\4\1\2\13\1\155\20\13\1\126\1\13\1\214" +
                    "\1\1\2\13\1\154\1\130\1\13\1\155\4\13\1\41\2\1\1\215\1\216\5\13\1\217\1\13" +
                    "\1\154\1\30\3\1\1\215\1\220\1\13\1\32\1\1\3\13\1\150\1\216\2\13\1\150\1\1" +
                    "\1\116\1\1\1\221\1\43\1\13\1\41\1\13\1\114\1\1\1\13\1\126\1\51\2\13\1\32\1" +
                    "\130\1\116\1\222\1\223\2\13\1\47\1\1\1\224\1\116\1\13\1\225\3\13\1\226\1\227" +
                    "\1\230\1\31\1\67\1\231\1\232\1\210\2\13\1\136\1\41\7\13\1\32\1\116\72\13\1" +
                    "\150\1\13\1\233\2\13\1\157\20\1\26\13\1\155\6\13\1\100\2\1\1\114\1\234\1\57" +
                    "\1\235\1\236\6\13\1\17\1\1\1\162\25\13\1\155\1\1\4\13\1\216\2\13\1\30\2\1" +
                    "\1\157\7\1\1\222\7\13\1\126\1\1\1\116\1\26\1\31\1\26\1\31\1\237\4\13\1\154" +
                    "\1\240\1\241\2\1\1\242\1\13\1\14\1\243\2\155\2\1\7\13\1\31\30\1\1\13\1\126" +
                    "\3\13\1\72\2\1\2\13\1\1\1\13\1\244\2\13\1\41\1\13\1\155\2\13\1\245\3\1\11" +
                    "\13\1\155\1\116\2\13\1\245\1\13\1\157\2\13\1\30\3\13\1\150\11\1\23\13\1\114" +
                    "\1\13\1\41\1\30\11\1\1\246\2\13\1\247\1\13\1\41\1\13\1\114\1\13\1\154\4\1" +
                    "\1\13\1\250\1\13\1\41\1\13\1\100\4\1\3\13\1\251\4\1\1\72\1\252\1\13\1\150" +
                    "\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1\13\1\156\1\1\3\13\1\41\1\13\1\41\1" +
                    "\13\1\32\1\13\1\17\6\1\4\13\1\47\3\1\3\13\1\32\3\13\1\32\60\1\1\162\2\13\1" +
                    "\30\2\1\1\66\1\1\1\162\2\13\2\1\1\13\1\47\1\116\1\162\1\13\1\114\1\66\1\1" +
                    "\2\13\1\253\1\162\2\13\1\32\1\254\1\255\2\1\1\13\1\23\1\157\5\1\1\256\1\257" +
                    "\1\47\2\13\1\154\1\1\1\116\1\74\1\56\1\57\1\71\1\1\1\260\1\17\11\1\3\13\1" +
                    "\156\1\261\1\116\2\1\3\13\1\1\1\262\1\116\12\1\2\13\1\154\2\1\1\263\2\1\3" +
                    "\13\1\1\1\264\1\116\2\1\2\13\1\31\1\1\1\116\3\1\1\13\1\100\1\1\1\116\26\1" +
                    "\4\13\1\116\1\130\34\1\3\13\1\47\20\1\1\57\1\13\1\154\1\1\1\72\1\116\1\1\1" +
                    "\216\1\13\67\1\71\13\1\100\16\1\14\13\1\150\53\1\2\13\1\154\75\1\44\13\1\114" +
                    "\33\1\43\13\1\47\1\13\1\154\1\116\6\1\1\13\1\155\1\1\3\13\1\1\1\150\1\116" +
                    "\1\162\1\265\1\13\67\1\4\13\1\156\1\72\3\1\1\162\4\1\1\72\1\1\76\13\1\126" +
                    "\1\1\57\13\1\32\20\1\1\17\77\1\6\13\1\31\1\126\1\47\1\100\66\1\5\13\1\222" +
                    "\3\13\1\147\1\266\1\267\1\270\3\13\1\271\1\272\1\13\1\273\1\274\1\37\24\13" +
                    "\1\275\1\13\1\37\1\136\1\13\1\136\1\13\1\222\1\13\1\222\1\154\1\13\1\154\1" +
                    "\13\1\57\1\13\1\57\1\13\1\276\3\277\14\13\1\156\3\1\4\13\1\150\1\116\112\1" +
                    "\1\270\1\13\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\157\1\307\1\157\24" +
                    "\1\55\13\1\114\2\1\103\13\1\156\15\13\1\155\150\13\1\17\25\1\41\13\1\155\36" +
                    "\1");

    /* The ZZ_CMAP_A table has 3200 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\63\1\53\1\57\1\24\1\40\1\70\1\52\1\61\1\62" +
                    "\1\67\1\65\1\56\1\66\1\23\1\72\2\41\5\6\1\10\2\45\1\14\1\32\1\54\1\22\1\55" +
                    "\1\0\1\50\1\5\1\75\1\26\1\7\1\15\6\11\1\37\1\25\1\31\1\30\1\73\1\16\1\27\1" +
                    "\20\1\21\1\17\1\74\1\36\3\11\1\0\1\33\1\0\1\60\1\12\1\51\1\42\1\34\1\47\1" +
                    "\43\1\46\1\44\5\11\1\37\1\25\1\31\1\30\1\73\1\16\1\27\1\35\1\21\1\17\1\74" +
                    "\1\36\3\11\1\0\1\71\1\0\1\64\6\0\1\1\12\0\1\4\11\0\1\11\12\0\1\11\4\0\1\11" +
                    "\5\0\27\11\1\0\27\11\1\20\2\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5" +
                    "\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\23" +
                    "\11\1\0\13\11\10\0\6\11\1\0\26\11\2\0\1\11\6\0\10\11\10\0\13\11\5\0\3\11\15" +
                    "\0\12\13\4\0\6\11\1\0\1\11\17\0\2\11\7\0\2\11\12\13\3\11\2\0\2\11\1\0\16\11" +
                    "\15\0\11\11\13\0\1\11\16\0\12\13\6\11\4\0\2\11\4\0\1\11\5\0\6\11\4\0\1\11" +
                    "\11\0\1\11\3\0\1\11\7\0\11\11\7\0\5\11\1\0\10\11\6\0\26\11\3\0\1\11\2\0\1" +
                    "\11\7\0\12\11\4\0\12\13\1\11\4\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11" +
                    "\3\0\4\11\3\0\1\11\20\0\1\11\15\0\2\11\1\0\1\11\5\0\6\11\4\0\2\11\1\0\2\11" +
                    "\1\0\2\11\1\0\2\11\17\0\4\11\1\0\1\11\7\0\12\13\2\0\3\11\20\0\11\11\1\0\2" +
                    "\11\1\0\2\11\1\0\5\11\3\0\1\11\2\0\1\11\30\0\1\11\13\0\10\11\2\0\1\11\3\0" +
                    "\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3" +
                    "\11\3\0\14\11\13\0\10\11\1\0\2\11\10\0\3\11\5\0\1\11\4\0\10\11\1\0\6\11\1" +
                    "\0\5\11\3\0\1\11\3\0\2\11\15\0\13\11\2\0\1\11\6\0\3\11\10\0\1\11\12\0\6\11" +
                    "\5\0\22\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11\11\0\1\11\1\0\2\11\14\0\12" +
                    "\13\7\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11" +
                    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\0\2\11\11\0\1\11\2\0\5\11\1\0\1\11" +
                    "\11\0\12\13\2\0\14\11\1\0\24\11\13\0\5\11\22\0\7\11\4\0\4\11\3\0\1\11\3\0" +
                    "\2\11\7\0\3\11\4\0\15\11\14\0\1\11\1\0\6\11\1\0\1\11\5\0\1\11\2\0\13\11\1" +
                    "\0\15\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\1\11\1\0\4\11\2\0\7\11\1" +
                    "\0\1\11\1\0\4\11\2\0\16\11\2\0\6\11\2\0\15\11\2\0\1\11\1\4\17\11\1\0\10\11" +
                    "\7\0\15\11\1\0\6\11\23\0\1\11\4\0\1\11\3\0\5\11\2\0\22\11\1\0\1\11\5\0\17" +
                    "\11\1\0\16\11\2\0\5\11\13\0\14\11\13\0\1\11\15\0\7\11\7\0\16\11\15\0\2\11" +
                    "\12\13\3\0\3\11\11\0\4\11\1\0\4\11\3\0\2\11\11\0\10\11\1\0\1\11\1\0\1\11\1" +
                    "\0\1\11\1\0\6\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0" +
                    "\13\4\15\0\2\1\5\0\1\4\17\0\1\4\1\0\1\11\15\0\1\11\2\0\1\11\4\0\1\11\2\0\12" +
                    "\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0\4" +
                    "\11\5\0\5\11\4\0\1\11\4\0\2\11\13\0\5\11\6\0\4\11\3\0\2\11\14\0\10\11\7\0" +
                    "\10\11\1\0\7\11\1\0\1\4\4\0\2\11\12\0\5\11\5\0\2\11\3\0\7\11\6\0\3\11\12\13" +
                    "\2\11\13\0\11\11\2\0\27\11\2\0\7\11\1\0\3\11\1\0\4\11\1\0\4\11\2\0\6\11\3" +
                    "\0\1\11\1\0\1\11\2\0\5\11\1\0\12\11\12\13\5\11\1\0\3\11\1\0\10\11\4\0\7\11" +
                    "\3\0\1\11\3\0\2\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\0\3\11" +
                    "\3\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\4\0\5\11\3\0\5\11\5\0\1\11\1\0\10\11" +
                    "\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\12\11\6\0\12\11\2\0\6\11\2\0\6\11" +
                    "\2\0\6\11\2\0\3\11\3\0\14\11\1\0\16\11\1\0\2\11\1\0\2\11\1\0\10\11\6\0\4\11" +
                    "\4\0\16\11\2\0\1\11\1\0\14\11\1\0\2\11\3\0\1\11\2\0\4\11\1\0\2\11\12\0\10" +
                    "\11\6\0\6\11\1\0\3\11\1\0\12\11\3\0\1\11\12\0\4\11\13\0\12\13\1\11\1\0\1\11" +
                    "\3\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0\2\11\14\0\3\11\7\0\4\11\11\0\2\11" +
                    "\1\0\1\11\20\0\4\11\10\0\1\11\13\0\10\11\5\0\3\11\2\0\1\11\2\0\2\11\2\0\4" +
                    "\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0\21\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0" +
                    "\14\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\14\11\2\0\13\11\1\0\10\11\2\0\22\13" +
                    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11" +
                    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1" +
                    "\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0" +
                    "\4\11\1\0\1\11\1\0\12\11\1\0\5\11\1\0\3\11\1\0\5\11\1\0\5\11");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\17\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6" +
                    "\1\2\1\7\1\10\1\1\1\7\1\11\2\12\1\7" +
                    "\1\10\1\13\1\14\1\15\1\1\1\16\1\17\1\20" +
                    "\4\17\1\1\1\17\5\1\1\21\1\22\1\23\1\24" +
                    "\1\25\1\26\1\27\1\30\1\31\1\32\2\17\1\33" +
                    "\1\34\1\33\1\35\1\36\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\44" +
                    "\1\52\2\1\1\53\1\54\1\55\6\1\1\56\1\57" +
                    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67" +
                    "\1\70\1\71\1\72\1\73\1\74\1\67\1\75\1\76" +
                    "\1\12\4\76\1\5\1\12\2\77\2\100\1\101\1\102" +
                    "\3\103\1\102\1\103\1\0\1\4\1\104\2\105\1\106" +
                    "\3\0\1\7\1\107\1\110\1\111\1\112\1\113\1\114" +
                    "\1\17\1\115\1\116\1\17\1\117\1\120\2\0\1\121" +
                    "\4\0\1\122\1\17\1\34\1\107\1\110\1\111\1\123" +
                    "\1\124\1\125\1\126\1\127\1\130\1\131\2\0\1\132" +
                    "\1\133\1\134\2\0\1\135\4\0\1\60\1\136\1\137" +
                    "\1\140\1\141\1\142\1\143\1\144\1\0\1\76\1\0" +
                    "\1\76\1\0\1\76\1\0\1\76\1\100\1\102\4\0" +
                    "\1\4\1\105\1\106\1\7\1\145\1\7\1\146\1\147" +
                    "\1\150\1\151\1\0\1\76\3\0\1\100\1\102\3\0" +
                    "\1\7\1\100\1\102\2\0\1\152\1\153\1\154\1\0" +
                    "\1\155";

    private static int[] zzUnpackAction() {
        int[] result = new int[235];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2" +
                    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2" +
                    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u03a2\0\u0516" +
                    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u03a2\0\u06c8" +
                    "\0\u0706\0\u0744\0\u03a2\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a" +
                    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a" +
                    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u03a2\0\u03a2\0\u03a2\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u0ba0\0\u0bde" +
                    "\0\u0c1c\0\u0c5a\0\u0c98\0\u03a2\0\u0cd6\0\u0d14\0\u03a2\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u0d52\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u0d90" +
                    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u03a2\0\u0ec6\0\u0f04\0\u0f42" +
                    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u03a2\0\u03a2\0\u10b6" +
                    "\0\u03a2\0\u10f4\0\u1132\0\u03a2\0\u03a2\0\u03a2\0\u1170\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u03a2\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u1268" +
                    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u139e\0\u03a2\0\u13dc" +
                    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u14d4\0\u03a2\0\u1512\0\u1550" +
                    "\0\u139e\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702" +
                    "\0\u1740\0\u177e\0\u17bc\0\u03a2\0\u03a2\0\u03a2\0\u0934\0\u0934" +
                    "\0\u0934\0\u17fa\0\u0934\0\u09ee\0\u1838\0\u0a6a\0\u0aa8\0\u0ae6" +
                    "\0\u1876\0\u03a2\0\u0b24\0\u18b4\0\u0b62\0\u18f2\0\u0934\0\u1930" +
                    "\0\u03a2\0\u0c1c\0\u0c1c\0\u0c1c\0\u03a2\0\u03a2\0\u03a2\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u03a2\0\u196e\0\u19ac\0\u0f42\0\u0f80\0\u0fbe" +
                    "\0\u0ffc\0\u19ea\0\u03a2\0\u103a\0\u1a28\0\u1078\0\u1a66\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u03a2\0\u1aa4" +
                    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94" +
                    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u03a2\0\u03a2\0\u03a2" +
                    "\0\u03a2\0\u03a2\0\u1e08\0\u0934\0\u0934\0\u0934\0\u03a2\0\u1e46" +
                    "\0\u03a2\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8" +
                    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u160a\0\u212e\0\u0592\0\u141a" +
                    "\0\u216c\0\u21aa\0\u21e8";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[235];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\20\2\21\1\22\1\23\1\24\1\20\1\24\1\20" +
                    "\2\24\2\20\5\24\1\20\1\25\1\20\5\24\1\26" +
                    "\1\20\4\24\2\20\3\24\1\20\2\24\7\20\1\26" +
                    "\7\20\1\26\3\20\3\24\1\20\2\27\1\30\1\31" +
                    "\1\32\1\20\1\32\1\20\1\32\1\33\2\20\5\32" +
                    "\1\20\1\34\1\20\1\35\4\32\1\36\1\20\4\32" +
                    "\2\20\3\32\1\20\2\32\7\20\1\36\7\20\1\36" +
                    "\3\20\3\32\1\20\2\37\1\40\1\31\1\41\1\20" +
                    "\1\41\1\20\1\41\1\42\1\20\1\43\5\41\3\20" +
                    "\5\41\1\44\1\20\4\41\2\20\3\41\1\20\2\41" +
                    "\23\20\3\41\1\20\2\37\1\40\1\45\16\20\1\46" +
                    "\6\20\1\44\44\20\2\37\1\40\1\47\1\50\1\51" +
                    "\1\52\1\51\2\53\2\20\2\53\1\54\1\55\1\53" +
                    "\1\20\1\53\1\56\1\53\1\57\3\53\1\44\1\20" +
                    "\1\53\1\55\2\53\1\60\1\51\1\50\1\52\1\53" +
                    "\1\51\1\53\1\57\1\61\1\62\1\63\1\64\2\20" +
                    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74" +
                    "\1\75\1\76\3\20\1\77\1\100\1\53\1\20\2\37" +
                    "\1\40\1\47\1\101\1\20\1\101\1\20\2\101\2\20" +
                    "\5\101\1\102\1\103\1\20\5\101\1\44\1\20\4\101" +
                    "\1\104\1\20\3\101\1\20\2\101\4\20\1\105\1\106" +
                    "\1\107\1\20\1\110\1\111\1\112\1\113\1\114\1\115" +
                    "\1\116\1\117\1\120\1\121\1\122\3\101\1\20\2\37" +
                    "\1\40\1\31\7\20\1\43\1\123\2\20\1\124\1\20" +
                    "\1\125\7\20\1\44\2\20\1\124\10\20\1\123\30\20" +
                    "\2\37\1\40\1\47\1\126\1\127\1\126\1\127\2\126" +
                    "\2\20\5\126\1\20\1\126\1\130\5\126\1\44\1\20" +
                    "\4\126\1\131\1\127\3\126\1\127\2\126\1\132\1\133" +
                    "\1\134\1\135\2\20\1\65\1\20\1\67\1\70\1\136" +
                    "\1\72\1\73\1\74\1\75\1\137\3\20\3\126\1\20" +
                    "\2\37\1\40\1\47\15\20\1\140\7\20\1\44\5\20" +
                    "\1\141\13\20\1\142\1\143\1\144\1\20\1\145\1\146" +
                    "\1\112\1\147\1\150\1\151\1\152\1\153\1\154\1\155" +
                    "\1\156\3\20\1\157\1\160\1\37\1\40\1\47\25\157" +
                    "\1\44\16\157\1\161\1\162\1\163\1\164\1\157\1\65" +
                    "\17\157\1\165\1\166\1\37\1\40\72\165\1\20\2\167" +
                    "\1\170\1\31\1\171\1\20\1\171\1\20\2\171\2\20" +
                    "\5\171\3\20\1\172\4\171\1\173\1\20\4\171\2\20" +
                    "\3\171\1\20\2\171\23\20\3\171\1\174\1\175\1\176" +
                    "\1\177\1\200\25\174\1\173\43\174\1\20\2\37\1\40" +
                    "\1\31\25\20\1\44\43\20\1\165\1\201\1\176\1\177" +
                    "\72\165\100\0\1\21\77\0\1\23\75\0\1\202\7\24" +
                    "\1\203\5\24\1\204\1\0\1\205\5\24\2\0\4\24" +
                    "\1\0\7\24\23\0\3\24\5\0\1\206\1\0\1\206" +
                    "\1\0\2\206\2\0\5\206\3\0\5\206\2\0\4\206" +
                    "\2\0\3\206\1\0\2\206\23\0\3\206\1\26\3\0" +
                    "\72\26\2\0\1\27\77\0\1\31\76\0\1\32\1\33" +
                    "\1\32\1\33\1\32\2\33\1\207\5\32\1\0\1\210" +
                    "\1\211\5\32\2\0\4\32\1\0\1\33\3\32\1\33" +
                    "\2\32\23\0\3\32\5\0\7\33\1\207\5\33\2\0" +
                    "\1\211\5\33\2\0\4\33\1\0\7\33\23\0\3\33" +
                    "\5\0\1\212\1\0\1\212\1\0\2\212\2\0\5\212" +
                    "\3\0\5\212\2\0\4\212\2\0\3\212\1\0\2\212" +
                    "\23\0\3\212\5\0\1\213\1\33\1\32\1\33\1\32" +
                    "\2\33\1\207\5\32\1\0\1\210\1\211\5\32\2\0" +
                    "\4\32\1\0\1\33\1\213\2\32\1\33\2\32\23\0" +
                    "\3\32\1\36\3\0\72\36\2\0\1\37\100\0\1\41" +
                    "\1\42\1\41\1\42\1\41\2\42\1\0\5\41\1\0" +
                    "\1\210\1\0\5\41\2\0\4\41\1\0\1\42\3\41" +
                    "\1\42\2\41\23\0\3\41\5\0\7\42\1\0\5\42" +
                    "\3\0\5\42\2\0\4\42\1\0\7\42\23\0\3\42" +
                    "\1\44\3\0\72\44\4\0\1\45\125\0\2\214\1\215" +
                    "\1\216\42\0\1\47\76\0\1\53\1\217\1\53\1\220" +
                    "\3\53\1\0\5\53\2\0\6\53\2\0\4\53\1\0" +
                    "\1\217\6\53\23\0\3\53\6\0\1\51\1\0\1\51" +
                    "\30\0\1\51\3\0\1\51\35\0\1\53\1\221\1\53" +
                    "\1\221\3\53\1\0\5\53\2\0\6\53\2\0\4\53" +
                    "\1\0\1\221\6\53\23\0\3\53\5\0\7\53\1\0" +
                    "\5\53\2\0\6\53\2\0\4\53\1\0\7\53\23\0" +
                    "\3\53\5\0\7\53\1\0\3\53\1\222\1\53\2\0" +
                    "\6\53\2\0\1\53\1\222\2\53\1\0\7\53\23\0" +
                    "\3\53\5\0\7\53\1\0\5\53\2\0\3\53\1\223" +
                    "\2\53\2\0\4\53\1\0\7\53\23\0\1\220\2\53" +
                    "\6\0\1\224\1\0\1\224\23\0\1\224\4\0\7\224" +
                    "\33\0\7\53\1\0\5\53\2\0\2\53\1\225\3\53" +
                    "\2\0\4\53\1\0\6\53\1\225\23\0\3\53\41\0" +
                    "\1\226\42\0\1\227\1\0\1\227\30\0\1\227\34\0" +
                    "\2\230\2\0\27\230\1\231\15\230\1\232\24\230\2\233" +
                    "\2\0\27\233\1\234\16\233\1\232\23\233\2\235\2\0" +
                    "\27\235\1\236\17\235\1\232\22\235\5\0\7\53\1\0" +
                    "\5\53\2\0\2\53\1\237\3\53\2\0\4\53\1\0" +
                    "\6\53\1\237\23\0\3\53\5\0\7\53\1\0\5\53" +
                    "\2\0\6\53\2\0\1\240\3\53\1\0\7\53\23\0" +
                    "\2\53\1\240\5\0\7\101\1\0\5\101\2\0\6\101" +
                    "\2\0\4\101\1\0\7\101\23\0\3\101\22\0\1\241" +
                    "\60\0\7\101\1\0\5\101\2\0\6\101\2\0\2\242" +
                    "\1\243\1\244\1\0\7\101\23\0\3\101\22\0\1\245" +
                    "\31\0\1\246\1\247\42\0\1\250\32\0\1\251\42\0" +
                    "\1\247\143\0\1\252\76\0\1\253\76\0\1\104\21\0" +
                    "\1\254\74\0\1\255\30\0\1\255\34\0\7\126\1\0" +
                    "\5\126\1\0\7\126\1\0\5\126\1\0\7\126\23\0" +
                    "\3\126\6\0\1\127\1\0\1\127\30\0\1\127\3\0" +
                    "\1\127\36\0\1\256\1\0\1\256\23\0\1\256\4\0" +
                    "\7\256\67\0\1\257\42\0\1\260\1\0\1\260\30\0" +
                    "\1\260\34\0\2\261\2\0\27\261\1\262\15\261\1\263" +
                    "\24\261\2\264\2\0\27\264\1\265\16\264\1\263\23\264" +
                    "\2\266\2\0\27\266\1\267\17\266\1\263\22\266\22\0" +
                    "\1\270\75\0\1\271\31\0\1\272\1\273\42\0\1\274" +
                    "\32\0\1\275\42\0\1\273\143\0\1\276\76\0\1\277" +
                    "\76\0\1\141\3\0\2\157\3\0\25\157\1\0\23\157" +
                    "\1\0\17\157\2\161\2\0\1\300\25\161\1\300\1\301" +
                    "\15\161\1\157\4\161\1\300\17\161\2\162\2\0\1\302" +
                    "\25\162\1\302\1\303\16\162\1\157\3\162\1\302\17\162" +
                    "\2\163\2\0\1\304\25\163\1\304\1\305\17\163\1\157" +
                    "\2\163\1\304\17\163\2\164\2\0\1\306\25\164\1\306" +
                    "\1\307\21\164\1\157\1\306\17\164\2\165\2\0\72\165" +
                    "\2\0\1\167\100\0\7\171\1\0\5\171\3\0\5\171" +
                    "\2\0\4\171\1\0\7\171\23\0\3\171\5\0\1\310" +
                    "\6\171\1\0\5\171\3\0\5\171\2\0\4\171\1\0" +
                    "\1\171\1\310\5\171\23\0\3\171\1\173\3\0\72\173" +
                    "\2\174\2\0\26\174\1\0\43\174\2\0\1\176\73\0" +
                    "\2\174\2\0\1\200\10\174\1\311\14\174\1\0\13\174" +
                    "\1\311\27\174\4\0\1\202\10\0\1\312\2\0\1\313" +
                    "\1\0\1\204\2\0\1\314\7\0\1\313\10\0\1\312" +
                    "\33\0\1\315\7\0\1\316\5\0\1\204\57\0\1\204" +
                    "\105\0\1\317\66\0\7\206\1\317\5\206\3\0\5\206" +
                    "\2\0\4\206\1\0\7\206\23\0\3\206\14\0\1\320" +
                    "\61\0\1\321\3\0\72\321\14\0\1\322\66\0\7\212" +
                    "\1\322\5\212\3\0\5\212\2\0\4\212\1\0\7\212" +
                    "\23\0\3\212\5\0\1\32\1\33\1\32\1\33\1\32" +
                    "\2\33\1\207\5\32\1\0\1\210\1\211\1\32\1\323" +
                    "\3\32\2\0\4\32\1\0\1\33\3\32\1\33\1\32" +
                    "\1\323\23\0\3\32\5\0\7\53\1\0\5\53\2\0" +
                    "\6\53\2\0\4\53\1\0\7\53\23\0\1\324\2\53" +
                    "\5\0\7\53\1\0\5\53\2\0\3\53\1\325\2\53" +
                    "\2\0\4\53\1\0\7\53\23\0\3\53\1\230\3\0" +
                    "\72\230\1\233\3\0\72\233\1\235\3\0\72\235\5\0" +
                    "\7\53\1\0\5\53\2\0\3\53\1\326\2\53\2\0" +
                    "\4\53\1\0\7\53\23\0\3\53\17\0\1\327\77\0" +
                    "\1\327\54\0\1\261\3\0\72\261\1\264\3\0\72\264" +
                    "\1\266\3\0\72\266\2\300\2\0\27\300\1\330\15\300" +
                    "\1\331\24\300\1\161\1\157\2\0\1\300\25\161\1\300" +
                    "\23\161\1\300\17\161\2\302\2\0\27\302\1\332\16\302" +
                    "\1\331\23\302\1\162\1\157\2\0\1\302\25\162\1\302" +
                    "\23\162\1\302\17\162\2\304\2\0\27\304\1\333\17\304" +
                    "\1\331\22\304\1\163\1\157\2\0\1\304\25\163\1\304" +
                    "\23\163\1\304\17\163\2\306\2\0\27\306\1\334\21\306" +
                    "\1\331\20\306\1\164\1\157\2\0\1\306\25\164\1\306" +
                    "\23\164\1\306\17\164\5\0\7\171\1\0\5\171\3\0" +
                    "\1\171\1\335\3\171\2\0\4\171\1\0\6\171\1\335" +
                    "\23\0\3\171\2\174\2\0\25\174\1\336\1\0\43\174" +
                    "\16\0\1\337\74\0\1\340\30\0\1\340\34\0\1\341" +
                    "\34\0\1\341\37\0\1\315\10\0\1\312\2\0\1\313" +
                    "\1\0\1\204\12\0\1\313\10\0\1\312\34\0\1\32" +
                    "\1\33\1\32\1\33\1\32\2\33\1\207\5\32\1\0" +
                    "\1\210\1\211\2\32\1\342\2\32\2\0\4\32\1\0" +
                    "\1\33\3\32\1\33\2\32\23\0\3\32\1\300\3\0" +
                    "\72\300\1\302\3\0\72\302\1\304\3\0\72\304\1\306" +
                    "\3\0\72\306\5\0\7\171\1\0\5\171\3\0\2\171" +
                    "\1\343\2\171\2\0\4\171\1\0\7\171\23\0\3\171" +
                    "\2\174\2\0\3\174\1\344\22\174\1\0\10\174\1\344" +
                    "\32\174\17\0\1\345\77\0\1\345\102\0\1\346\20\0" +
                    "\1\346\33\0\1\32\1\33\1\32\1\33\1\32\2\33" +
                    "\1\207\5\32\1\0\1\210\1\211\3\32\1\347\1\32" +
                    "\2\0\4\32\1\0\1\33\3\32\1\33\2\32\23\0" +
                    "\3\32\5\0\7\171\1\0\5\171\3\0\3\171\1\350" +
                    "\1\171\2\0\4\171\1\0\7\171\23\0\3\171\2\174" +
                    "\2\0\21\174\1\351\4\174\1\0\43\174\27\0\1\352" +
                    "\46\0\2\351\2\0\26\351\1\0\43\351\30\0\1\353" +
                    "\51\0\1\353\71\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[8742];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\17\0\2\11\5\1\1\11\7\1\1\11\3\1\1\11" +
                    "\21\1\12\11\5\1\1\11\2\1\4\11\1\1\4\11" +
                    "\5\1\1\11\10\1\2\11\1\1\1\11\2\1\3\11" +
                    "\1\1\4\11\13\1\1\11\6\1\1\11\3\1\1\0" +
                    "\5\1\3\0\1\1\3\11\11\1\2\0\1\11\4\0" +
                    "\2\1\1\11\3\1\7\11\2\0\3\1\2\0\1\11" +
                    "\4\0\10\11\1\0\1\1\1\0\1\1\1\0\1\1" +
                    "\1\0\3\1\4\0\5\11\4\1\1\11\1\0\1\11" +
                    "\3\0\2\1\3\0\3\1\2\0\3\1\1\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[235];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    private M68kLexerPrefs lexerPrefs;
    boolean eatOneWhitespace = false;
    int macroLines = 0;

    public M68kLexerPrefs getLexerPrefs() {
        return lexerPrefs;
    }

    public _M68kLexer(M68kLexerPrefs lexerPrefs) {
        this((java.io.Reader) null);
        this.lexerPrefs = lexerPrefs;
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _M68kLexer(java.io.Reader in) {
        zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 110:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 111:
                        break;
                    case 3: {
                        yybegin(NOSOL);
                        eatOneWhitespace = false;
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 112:
                        break;
                    case 4: {
                        yybegin(INSTRPART);
                        eatOneWhitespace = false;
                        yypushback(pushbackLabelColons(yytext()));
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 113:
                        break;
                    case 5: {
                        return COMMENT;
                    }
                    // fall through
                    case 114:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 115:
                        break;
                    case 7: {
                        if (isAsmMnemonicWithSize(yytext())) {
                            yybegin(ASMINSTR);
                            yypushback(2);
                            return MNEMONIC;
                        }
                        if (isAsmMnemonic(yytext())) {
                            yybegin(ASMINSTR);
                            return MNEMONIC;
                        }
                        if (isDataDirective(yytext())) {
                            yybegin(EXPR);
                            return DATA_DIRECTIVE;
                        }
                        if (isOtherDirective(yytext())) {
                            yybegin(EXPR);
                            return OTHER_DIRECTIVE;
                        }
                        yybegin(MACROCALL);
                        eatOneWhitespace = true;
                        return MACRO_INVOKATION;
                    }
                    // fall through
                    case 116:
                        break;
                    case 8: {
                        yybegin(MACROCALL);
                        eatOneWhitespace = true;
                        return MACRO_INVOKATION;
                    }
                    // fall through
                    case 117:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return COMMENT;
                    }
                    // fall through
                    case 118:
                        break;
                    case 10: {
                        yybegin(YYINITIAL);
                        return EOL;
                    }
                    // fall through
                    case 119:
                        break;
                    case 11: {
                        return COLON;
                    }
                    // fall through
                    case 120:
                        break;
                    case 12: {
                        yybegin(WAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 121:
                        break;
                    case 13: {
                        yybegin(ASMOPS);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 122:
                        break;
                    case 14: {
                        return handleEolCommentWhitespace(this);
                    }
                    // fall through
                    case 123:
                        break;
                    case 15: {
                        yybegin(ASMOPS_OP);
                        return SYMBOL;
                    }
                    // fall through
                    case 124:
                        break;
                    case 16: {
                        yybegin(ASMOPS_OP);
                        return DECIMAL;
                    }
                    // fall through
                    case 125:
                        break;
                    case 17: {
                        return SEPARATOR;
                    }
                    // fall through
                    case 126:
                        break;
                    case 18: {
                        return HASH;
                    }
                    // fall through
                    case 127:
                        break;
                    case 19: {
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 128:
                        break;
                    case 20: {
                        return ROUND_L;
                    }
                    // fall through
                    case 129:
                        break;
                    case 21: {
                        yybegin(ASMOPS_OP);
                        return ROUND_R;
                    }
                    // fall through
                    case 130:
                        break;
                    case 22: {
                        return OP_UNARY_NOT;
                    }
                    // fall through
                    case 131:
                        break;
                    case 23: {
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 132:
                        break;
                    case 24: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 133:
                        break;
                    case 25: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 134:
                        break;
                    case 26: {
                        yybegin(ASMOPS_OP);
                        return CURRENT_PC_SYMBOL;
                    }
                    // fall through
                    case 135:
                        break;
                    case 27: {
                        return SYMBOL;
                    }
                    // fall through
                    case 136:
                        break;
                    case 28: {
                        yybegin(ASMOPS);
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 137:
                        break;
                    case 29: {
                        yybegin(ASMOPS);
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 138:
                        break;
                    case 30: {
                        yybegin(ASMOPS);
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 139:
                        break;
                    case 31: {
                        yybegin(ASMOPS);
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 140:
                        break;
                    case 32: {
                        yybegin(ASMOPS);
                        return SEPARATOR;
                    }
                    // fall through
                    case 141:
                        break;
                    case 33: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 142:
                        break;
                    case 34: {
                        yybegin(ASMOPS);
                        return ROUND_L;
                    }
                    // fall through
                    case 143:
                        break;
                    case 35: {
                        return ROUND_R;
                    }
                    // fall through
                    case 144:
                        break;
                    case 36: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 145:
                        break;
                    case 37: {
                        yybegin(ASMOPS);
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 146:
                        break;
                    case 38: {
                        yybegin(ASMOPS);
                        return OP_PLUS;
                    }
                    // fall through
                    case 147:
                        break;
                    case 39: {
                        yybegin(ASMOPS);
                        return OP_MINUS;
                    }
                    // fall through
                    case 148:
                        break;
                    case 40: {
                        yybegin(ASMOPS);
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 149:
                        break;
                    case 41: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 150:
                        break;
                    case 42: {
                        yybegin(ASMOPS);
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 151:
                        break;
                    case 43: {
                        yybegin(EXPR);
                        return OP_ASSIGN;
                    }
                    // fall through
                    case 152:
                        break;
                    case 44: {
                        yybegin(EXPR_OP);
                        return SYMBOL;
                    }
                    // fall through
                    case 153:
                        break;
                    case 45: {
                        yybegin(EXPR_OP);
                        return DECIMAL;
                    }
                    // fall through
                    case 154:
                        break;
                    case 46: {
                        yybegin(EXPR_OP);
                        return ROUND_R;
                    }
                    // fall through
                    case 155:
                        break;
                    case 47: {
                        yybegin(EXPR_OP);
                        return CURRENT_PC_SYMBOL;
                    }
                    // fall through
                    case 156:
                        break;
                    case 48: {
                        yybegin(EXPR);
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 157:
                        break;
                    case 49: {
                        yybegin(EXPR);
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 158:
                        break;
                    case 50: {
                        yybegin(EXPR);
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 159:
                        break;
                    case 51: {
                        yybegin(EXPR);
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 160:
                        break;
                    case 52: {
                        yybegin(EXPR);
                        return SEPARATOR;
                    }
                    // fall through
                    case 161:
                        break;
                    case 53: {
                        yybegin(EXPR);
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 162:
                        break;
                    case 54: {
                        yybegin(EXPR);
                        return ROUND_L;
                    }
                    // fall through
                    case 163:
                        break;
                    case 55: {
                        yybegin(EXPR);
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 164:
                        break;
                    case 56: {
                        yybegin(EXPR);
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 165:
                        break;
                    case 57: {
                        yybegin(EXPR);
                        return OP_PLUS;
                    }
                    // fall through
                    case 166:
                        break;
                    case 58: {
                        yybegin(EXPR);
                        return OP_MINUS;
                    }
                    // fall through
                    case 167:
                        break;
                    case 59: {
                        yybegin(EXPR);
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 168:
                        break;
                    case 60: {
                        yybegin(EXPR);
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 169:
                        break;
                    case 61: {
                        yybegin(EXPR);
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 170:
                        break;
                    case 62: {
                        return STRINGLIT;
                    }
                    // fall through
                    case 171:
                        break;
                    case 63: {
                        yybegin(MACROLINE);
                        macroLines = 0;
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 172:
                        break;
                    case 64: {
                        return MACRO_NAME;
                    }
                    // fall through
                    case 173:
                        break;
                    case 65: {
                        yybegin(MACROWAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 174:
                        break;
                    case 66: {
                        return MACRO_LINE;
                    }
                    // fall through
                    case 175:
                        break;
                    case 67: {
                        return handleMacroLineEol(this);
                    }
                    // fall through
                    case 176:
                        break;
                    case 68: {
                        yybegin(ASSIGNMENT);
                        eatOneWhitespace = true;
                        yypushback(pushbackAssignment(yytext()));
                        return SYMBOLDEF;
                    }
                    // fall through
                    case 177:
                        break;
                    case 69: {
                        yybegin(INSTRPART);
                        eatOneWhitespace = false;
                        yypushback(pushbackLabelColons(yytext()));
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 178:
                        break;
                    case 70: {
                        yybegin(INSTRPART);
                        yypushback(pushbackLabelColons(yytext()));
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 179:
                        break;
                    case 71: {
                        return OPSIZE_BS;
                    }
                    // fall through
                    case 180:
                        break;
                    case 72: {
                        return OPSIZE_W;
                    }
                    // fall through
                    case 181:
                        break;
                    case 73: {
                        return OPSIZE_L;
                    }
                    // fall through
                    case 182:
                        break;
                    case 74: {
                        yybegin(ASMOPS_OP);
                        return AREG;
                    }
                    // fall through
                    case 183:
                        break;
                    case 75: {
                        yybegin(ASMOPS_OP);
                        return REG_SP;
                    }
                    // fall through
                    case 184:
                        break;
                    case 76: {
                        yybegin(ASMOPS_OP);
                        return DREG;
                    }
                    // fall through
                    case 185:
                        break;
                    case 77: {
                        yybegin(ASMOPS_OP);
                        return REG_SR;
                    }
                    // fall through
                    case 186:
                        break;
                    case 78: {
                        yybegin(ASMOPS_OP);
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 187:
                        break;
                    case 79: {
                        yybegin(ASMOPS_OP);
                        return BINARY;
                    }
                    // fall through
                    case 188:
                        break;
                    case 80: {
                        yybegin(ASMOPS_OP);
                        return OCTAL;
                    }
                    // fall through
                    case 189:
                        break;
                    case 81: {
                        yybegin(ASMOPS_OP);
                        return STRINGLIT;
                    }
                    // fall through
                    case 190:
                        break;
                    case 82: {
                        yybegin(ASMOPS_OP);
                        return PC;
                    }
                    // fall through
                    case 191:
                        break;
                    case 83: {
                        yybegin(ASMOPS);
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 192:
                        break;
                    case 84: {
                        yybegin(ASMOPS);
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 193:
                        break;
                    case 85: {
                        yybegin(ASMOPS);
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 194:
                        break;
                    case 86: {
                        yybegin(ASMOPS);
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 195:
                        break;
                    case 87: {
                        yybegin(ASMOPS);
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 196:
                        break;
                    case 88: {
                        yybegin(ASMOPS);
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 197:
                        break;
                    case 89: {
                        yybegin(ASMOPS);
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 198:
                        break;
                    case 90: {
                        yybegin(EXPR_OP);
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 199:
                        break;
                    case 91: {
                        yybegin(EXPR_OP);
                        return BINARY;
                    }
                    // fall through
                    case 200:
                        break;
                    case 92: {
                        yybegin(EXPR_OP);
                        return OCTAL;
                    }
                    // fall through
                    case 201:
                        break;
                    case 93: {
                        yybegin(EXPR_OP);
                        return STRINGLIT;
                    }
                    // fall through
                    case 202:
                        break;
                    case 94: {
                        yybegin(EXPR);
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 203:
                        break;
                    case 95: {
                        yybegin(EXPR);
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 204:
                        break;
                    case 96: {
                        yybegin(EXPR);
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 205:
                        break;
                    case 97: {
                        yybegin(EXPR);
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 206:
                        break;
                    case 98: {
                        yybegin(EXPR);
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 207:
                        break;
                    case 99: {
                        yybegin(EXPR);
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 208:
                        break;
                    case 100: {
                        yybegin(EXPR);
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 209:
                        break;
                    case 101: {
                        yybegin(INSTRPART);
                        yypushback(pushbackLabelColons(yytext()));
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 210:
                        break;
                    case 102: {
                        yybegin(ASMOPS_OP);
                        return REG_USP;
                    }
                    // fall through
                    case 211:
                        break;
                    case 103: {
                        yybegin(ASMOPS_OP);
                        return REG_CCR;
                    }
                    // fall through
                    case 212:
                        break;
                    case 104: {
                        yybegin(ASMOPS_OP);
                        return REG_VBR;
                    }
                    // fall through
                    case 213:
                        break;
                    case 105: {
                        yybegin(EXPR);
                        return EQU;
                    }
                    // fall through
                    case 214:
                        break;
                    case 106: {
                        yybegin(MACRODEF);
                        return MACRO_TAG;
                    }
                    // fall through
                    case 215:
                        break;
                    case 107: {
                        return MACRO_TAG;
                    }
                    // fall through
                    case 216:
                        break;
                    case 108: {
                        yybegin(MACROTERMINATION);
                        return MACRO_END_TAG;
                    }
                    // fall through
                    case 217:
                        break;
                    case 109: {
                        yybegin(MACRODEF);
                        yypushback(pushbackAfterFirstToken(yytext()));
                        return MACRO_NAME;
                    }
                    // fall through
                    case 218:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
