/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.platon42.intellij.plugins.m68k.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.platon42.intellij.plugins.m68k.lexer.LexerUtil.isAsmMnemonic;
import static de.platon42.intellij.plugins.m68k.lexer.LexerUtil.pushbackAssignment;
import static de.platon42.intellij.plugins.m68k.psi.M68kTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NOSOL = 2;
    public static final int INSTRPART = 4;
    public static final int ASMINSTR = 6;
    public static final int ASMOPS = 8;
    public static final int ASSIGNMENT = 10;
    public static final int WAITEOL = 12;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 14496 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                    "\53\4\14\1\54\12\11\1\55\u0381\11");

    /* The ZZ_CMAP_Y table has 2944 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3" +
                    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25" +
                    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13" +
                    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1" +
                    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52" +
                    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64" +
                    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74" +
                    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67" +
                    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\104\1\40\1\60\1\105\1\1\1\62" +
                    "\1\55\1\106\1\102\1\40\1\13\1\107\1\62\1\110\1\55\1\111\1\112\1\113\1\13\1" +
                    "\114\1\115\1\1\1\67\1\1\1\27\2\13\1\116\1\115\1\117\2\1\1\120\1\121\1\122" +
                    "\1\123\1\124\1\125\2\1\1\73\1\1\1\117\1\1\1\126\1\13\1\127\1\1\1\130\7\1\2" +
                    "\13\1\32\1\131\1\117\1\132\1\133\1\134\1\135\1\117\2\13\1\136\2\13\1\137\24" +
                    "\13\1\140\1\141\2\13\1\140\2\13\1\142\1\143\1\14\3\13\1\143\3\13\1\32\2\1" +
                    "\1\13\1\1\5\13\1\144\1\27\45\13\1\145\1\13\1\146\1\32\4\13\1\32\1\147\1\150" +
                    "\1\20\1\13\1\20\1\13\1\20\1\150\1\73\3\13\1\151\1\1\1\152\1\117\2\1\1\117" +
                    "\5\13\1\31\1\153\1\13\1\154\4\13\1\42\1\13\1\155\2\1\1\67\1\13\1\156\1\157" +
                    "\2\13\1\160\1\13\1\101\1\117\2\1\1\13\1\115\3\13\1\157\2\1\2\117\1\161\5\1" +
                    "\1\112\2\13\1\151\1\162\1\117\2\1\1\163\1\13\1\164\1\44\2\13\1\42\1\1\2\13" +
                    "\1\151\1\1\1\165\1\44\1\13\1\156\1\50\5\1\1\166\1\167\14\13\4\1\21\13\1\144" +
                    "\2\13\1\144\1\170\1\13\1\156\3\13\1\171\1\172\1\173\1\127\1\172\1\174\1\1" +
                    "\1\175\2\1\1\176\1\1\1\177\1\1\1\127\6\1\1\200\1\201\1\202\1\203\1\204\3\1" +
                    "\1\205\147\1\2\13\1\155\2\13\1\155\10\13\1\206\1\207\2\13\1\136\3\13\1\210" +
                    "\1\1\1\13\1\115\4\211\4\1\1\131\35\1\1\212\2\1\1\213\1\27\4\13\1\214\1\27" +
                    "\4\13\1\137\1\112\1\13\1\156\1\27\4\13\1\155\1\1\1\13\1\32\3\1\1\13\40\1\133" +
                    "\13\1\42\4\1\135\13\1\42\2\1\10\13\1\127\4\1\2\13\1\156\20\13\1\127\1\13\1" +
                    "\215\1\1\2\13\1\155\1\131\1\13\1\156\4\13\1\42\2\1\1\216\1\217\5\13\1\220" +
                    "\1\13\1\155\1\31\3\1\1\216\1\221\1\13\1\33\1\1\3\13\1\151\1\217\2\13\1\151" +
                    "\1\1\1\117\1\1\1\222\1\44\1\13\1\42\1\13\1\115\1\1\1\13\1\127\1\52\2\13\1" +
                    "\33\1\131\1\117\1\223\1\224\2\13\1\50\1\1\1\225\1\117\1\13\1\226\3\13\1\227" +
                    "\1\230\1\231\1\32\1\70\1\232\1\233\1\211\2\13\1\137\1\42\7\13\1\33\1\117\72" +
                    "\13\1\151\1\13\1\234\2\13\1\160\20\1\26\13\1\156\6\13\1\101\2\1\1\115\1\235" +
                    "\1\60\1\236\1\237\6\13\1\20\1\1\1\163\25\13\1\156\1\1\4\13\1\217\2\13\1\31" +
                    "\2\1\1\160\7\1\1\223\7\13\1\127\1\1\1\117\1\27\1\32\1\27\1\32\1\240\4\13\1" +
                    "\155\1\241\1\242\2\1\1\243\1\13\1\14\1\244\2\156\2\1\7\13\1\32\30\1\1\13\1" +
                    "\127\3\13\1\73\2\1\2\13\1\1\1\13\1\245\2\13\1\42\1\13\1\156\2\13\1\246\3\1" +
                    "\11\13\1\156\1\117\2\13\1\246\1\13\1\160\2\13\1\31\3\13\1\151\11\1\23\13\1" +
                    "\115\1\13\1\42\1\31\11\1\1\247\2\13\1\250\1\13\1\42\1\13\1\115\1\13\1\155" +
                    "\4\1\1\13\1\251\1\13\1\42\1\13\1\101\4\1\3\13\1\252\4\1\1\73\1\253\1\13\1" +
                    "\151\2\1\1\13\1\127\1\13\1\127\2\1\1\126\1\13\1\157\1\1\3\13\1\42\1\13\1\42" +
                    "\1\13\1\33\1\13\1\20\6\1\4\13\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\163\2\13" +
                    "\1\31\2\1\1\67\1\1\1\163\2\13\2\1\1\13\1\50\1\117\1\163\1\13\1\115\1\67\1" +
                    "\1\2\13\1\254\1\163\2\13\1\33\1\255\1\256\2\1\1\13\1\24\1\160\5\1\1\257\1" +
                    "\260\1\50\2\13\1\155\1\1\1\117\1\75\1\57\1\60\1\72\1\1\1\261\1\20\11\1\3\13" +
                    "\1\157\1\262\1\117\2\1\3\13\1\1\1\263\1\117\12\1\2\13\1\155\2\1\1\264\2\1" +
                    "\3\13\1\1\1\265\1\117\2\1\2\13\1\32\1\1\1\117\3\1\1\13\1\101\1\1\1\117\26" +
                    "\1\4\13\1\117\1\131\34\1\3\13\1\50\20\1\1\60\1\13\1\155\1\1\1\73\1\117\1\1" +
                    "\1\217\1\13\67\1\71\13\1\101\16\1\14\13\1\151\53\1\2\13\1\155\75\1\44\13\1" +
                    "\115\33\1\43\13\1\50\1\13\1\155\1\117\6\1\1\13\1\156\1\1\3\13\1\1\1\151\1" +
                    "\117\1\163\1\266\1\13\67\1\4\13\1\157\1\73\3\1\1\163\4\1\1\73\1\1\76\13\1" +
                    "\127\1\1\57\13\1\33\20\1\1\20\77\1\6\13\1\32\1\127\1\50\1\101\66\1\5\13\1" +
                    "\223\3\13\1\150\1\267\1\270\1\271\3\13\1\272\1\273\1\13\1\274\1\275\1\40\24" +
                    "\13\1\276\1\13\1\40\1\137\1\13\1\137\1\13\1\223\1\13\1\223\1\155\1\13\1\155" +
                    "\1\13\1\60\1\13\1\60\1\13\1\277\3\300\14\13\1\157\3\1\4\13\1\151\1\117\112" +
                    "\1\1\271\1\13\1\301\1\302\1\303\1\304\1\305\1\306\1\307\1\160\1\310\1\160" +
                    "\24\1\55\13\1\115\2\1\103\13\1\157\15\13\1\156\150\13\1\20\25\1\41\13\1\156" +
                    "\36\1");

    /* The ZZ_CMAP_A table has 3216 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\66\1\46\1\52\1\26\1\32\1\64\1\45\1\70\1\71" +
                    "\1\75\1\73\1\77\1\74\1\24\1\76\2\33\6\11\2\40\1\25\1\51\1\47\1\23\1\50\1\0" +
                    "\1\42\1\10\1\61\1\55\1\14\1\17\1\6\2\7\1\5\2\7\1\57\1\62\1\54\1\56\1\13\1" +
                    "\20\1\63\1\12\1\22\1\21\1\53\4\7\1\0\1\44\1\0\1\67\1\15\1\43\1\36\1\27\1\35" +
                    "\1\37\1\41\1\34\2\7\1\5\2\7\1\60\1\62\1\54\1\56\1\13\1\20\1\63\1\30\1\22\1" +
                    "\21\1\53\1\31\3\7\1\0\1\65\1\0\1\72\6\0\1\1\12\0\1\4\11\0\1\7\12\0\1\7\4\0" +
                    "\1\7\5\0\27\7\1\0\10\7\2\5\35\7\1\12\2\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7" +
                    "\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7" +
                    "\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\16" +
                    "\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\16\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13" +
                    "\0\1\7\16\0\12\16\6\7\4\0\2\7\4\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0" +
                    "\11\7\7\0\5\7\1\0\10\7\6\0\26\7\3\0\1\7\2\0\1\7\7\0\12\7\4\0\12\16\1\7\4\0" +
                    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1" +
                    "\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\16" +
                    "\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10" +
                    "\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7" +
                    "\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0\1\7\4\0\10\7\1\0\6\7\1\0" +
                    "\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\6\0\3\7\10\0\1\7\12\0\6\7\5\0\22\7" +
                    "\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\16\7\0\2\7\1\0" +
                    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2" +
                    "\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\16\2\0\14\7\1\0\24\7\13" +
                    "\0\5\7\22\0\7\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7" +
                    "\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7" +
                    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\4\17" +
                    "\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\5\7\2\0\22\7\1\0\1\7\5\0" +
                    "\17\7\1\0\16\7\2\0\5\7\13\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\16" +
                    "\3\0\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6" +
                    "\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\13\4\15\0\2\1\5\0\1" +
                    "\4\17\0\1\4\1\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0" +
                    "\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0" +
                    "\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\1\0\1\4\4\0\2\7\12\0\5\7\5" +
                    "\0\2\7\3\0\7\7\6\0\3\7\12\16\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4" +
                    "\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\16\5\7\1\0\3\7\1\0" +
                    "\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0" +
                    "\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0" +
                    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0" +
                    "\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1" +
                    "\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7" +
                    "\3\0\1\7\12\0\4\7\13\0\12\16\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7" +
                    "\1\0\2\7\14\0\3\7\7\0\4\7\11\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0" +
                    "\3\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0" +
                    "\10\7\1\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7" +
                    "\2\0\22\16\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1" +
                    "\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7" +
                    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1" +
                    "\0\12\7\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\7\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6" +
                    "\1\2\1\7\2\10\1\11\2\12\4\13\1\14\2\13" +
                    "\1\15\2\13\1\16\1\1\1\14\1\17\4\14\1\20" +
                    "\1\14\1\1\1\21\1\14\4\1\1\22\1\23\1\24" +
                    "\1\14\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\1\35\1\36\1\37\1\40\2\14\1\0\1\41" +
                    "\1\4\2\42\3\10\1\43\11\13\1\44\1\45\1\46" +
                    "\1\47\1\50\1\51\1\14\1\52\1\44\1\45\1\53" +
                    "\1\54\1\14\1\55\1\0\1\56\6\0\1\57\1\0" +
                    "\1\60\1\56\1\61\1\62\1\14\1\63\1\64\1\65" +
                    "\2\14\2\0\1\4\1\42\4\13\1\66\4\13\1\67" +
                    "\1\70\1\71\1\72\2\0\2\13\1\73\1\13\1\74" +
                    "\1\75\1\76\1\77\1\100\1\101\1\13\1\102\1\0" +
                    "\3\13\1\103\1\104\2\13\1\105\1\106";

    private static int[] zzUnpackAction() {
        int[] result = new int[161];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0" +
                    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u01c0\0\u0340" +
                    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u01c0\0\u04c0\0\u0500" +
                    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700" +
                    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900" +
                    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00" +
                    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u01c0\0\u0c40\0\u0c80\0\u0cc0" +
                    "\0\u0d00\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0" +
                    "\0\u01c0\0\u01c0\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80" +
                    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080" +
                    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u01c0\0\u01c0" +
                    "\0\u0600\0\u0600\0\u0600\0\u0600\0\u1240\0\u01c0\0\u0600\0\u0600" +
                    "\0\u0a00\0\u0a40\0\u1280\0\u0ac0\0\u0b00\0\u01c0\0\u12c0\0\u0b40" +
                    "\0\u1300\0\u0b80\0\u1340\0\u1380\0\u1380\0\u13c0\0\u1380\0\u1380" +
                    "\0\u01c0\0\u01c0\0\u1400\0\u01c0\0\u01c0\0\u01c0\0\u1440\0\u1480" +
                    "\0\u14c0\0\u1500\0\u01c0\0\u01c0\0\u1540\0\u1580\0\u15c0\0\u1600" +
                    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u0600\0\u0600\0\u0600" +
                    "\0\u0600\0\u1780\0\u17c0\0\u1800\0\u1840\0\u0580\0\u1880\0\u0580" +
                    "\0\u0580\0\u0580\0\u0580\0\u0580\0\u0580\0\u18c0\0\u0580\0\u0e00" +
                    "\0\u1900\0\u1940\0\u1980\0\u0580\0\u0580\0\u19c0\0\u1a00\0\u0580" +
                    "\0\u0580";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[161];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\10\2\11\1\12\1\13\4\14\1\10\4\14\1\10" +
                    "\4\14\1\10\1\15\2\10\3\14\2\10\4\14\1\10" +
                    "\1\14\7\10\2\16\11\14\11\10\1\16\3\10\2\17" +
                    "\1\20\1\21\4\22\1\10\3\22\1\23\1\10\4\22" +
                    "\1\10\1\24\2\10\3\22\2\10\4\22\1\10\1\22" +
                    "\7\10\2\25\11\22\11\10\1\25\3\10\2\26\1\27" +
                    "\1\21\1\30\1\31\2\32\1\10\1\33\2\32\1\34" +
                    "\1\10\1\35\3\32\1\10\1\34\2\10\1\32\1\33" +
                    "\1\32\2\10\1\31\1\36\2\32\1\10\1\35\7\10" +
                    "\1\37\1\10\2\32\1\36\4\32\1\40\1\41\15\10" +
                    "\2\26\1\27\1\42\17\10\1\43\24\10\1\37\27\10" +
                    "\2\26\1\27\1\21\3\34\1\44\1\45\1\46\1\47" +
                    "\1\50\1\34\1\10\2\34\1\51\1\34\1\52\1\53" +
                    "\1\10\1\54\1\34\1\46\1\34\1\55\1\45\1\34" +
                    "\1\56\1\44\1\50\1\45\1\34\1\57\1\60\1\10" +
                    "\1\61\1\62\1\63\1\64\1\37\1\65\1\66\1\34" +
                    "\1\56\6\34\1\67\1\70\1\71\1\72\1\73\1\74" +
                    "\1\75\1\76\1\77\1\100\1\101\1\102\1\10\2\26" +
                    "\1\27\1\21\4\34\1\45\1\103\3\34\1\10\1\104" +
                    "\3\34\1\52\1\34\1\10\1\54\1\34\1\103\1\34" +
                    "\1\55\1\45\4\34\1\45\1\104\1\57\1\60\1\10" +
                    "\1\61\1\62\1\63\1\64\1\37\1\10\11\34\1\67" +
                    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77" +
                    "\1\100\1\101\2\10\2\26\1\27\74\10\102\0\1\11" +
                    "\101\0\1\13\77\0\1\105\16\14\1\106\1\0\1\107" +
                    "\1\110\3\14\1\0\7\14\11\0\11\14\21\0\4\111" +
                    "\1\0\4\111\1\0\4\111\4\0\3\111\2\0\4\111" +
                    "\1\0\1\111\11\0\11\111\14\0\1\16\3\0\74\16" +
                    "\2\0\1\17\101\0\1\21\100\0\4\22\1\23\3\22" +
                    "\2\23\4\22\2\0\1\107\1\112\3\22\1\0\1\23" +
                    "\4\22\1\23\1\22\11\0\11\22\21\0\16\23\2\0" +
                    "\1\107\1\112\3\23\1\0\7\23\11\0\11\23\21\0" +
                    "\4\113\1\114\4\113\1\114\4\113\3\0\1\114\3\113" +
                    "\1\0\1\114\4\113\1\114\1\113\11\0\11\113\14\0" +
                    "\1\25\3\0\74\25\2\0\1\26\102\0\1\32\1\115" +
                    "\2\32\1\34\3\32\2\34\4\32\3\0\1\34\3\32" +
                    "\1\0\1\34\1\115\3\32\1\34\1\32\11\0\1\32" +
                    "\1\116\7\32\21\0\3\32\1\117\1\34\3\32\2\34" +
                    "\4\32\3\0\1\34\3\32\1\0\1\34\2\32\1\117" +
                    "\1\32\1\34\1\32\11\0\11\32\21\0\4\32\1\34" +
                    "\3\32\2\34\4\32\3\0\1\34\3\32\1\0\1\34" +
                    "\4\32\1\34\1\32\11\0\11\32\21\0\4\32\1\34" +
                    "\3\32\2\34\1\120\3\32\3\0\1\34\3\32\1\0" +
                    "\1\34\4\32\1\34\1\120\11\0\11\32\21\0\16\34" +
                    "\3\0\4\34\1\0\7\34\11\0\11\34\21\0\4\32" +
                    "\1\34\3\32\2\34\4\32\3\0\1\34\3\32\1\0" +
                    "\1\34\4\32\1\34\1\32\11\0\1\121\1\122\2\32" +
                    "\2\123\3\32\21\0\4\32\1\34\3\32\2\34\4\32" +
                    "\3\0\1\34\3\32\1\0\1\34\4\32\1\34\1\32" +
                    "\11\0\1\32\1\124\7\32\14\0\1\37\3\0\74\37" +
                    "\5\0\3\32\1\125\1\34\3\32\2\34\4\32\3\0" +
                    "\1\34\3\32\1\0\1\34\2\32\1\125\1\32\1\34" +
                    "\1\32\11\0\11\32\21\0\4\32\1\34\3\32\2\34" +
                    "\1\126\3\32\3\0\1\34\3\32\1\0\1\34\4\32" +
                    "\1\34\1\126\11\0\11\32\20\0\1\42\122\0\2\127" +
                    "\1\130\26\0\1\130\24\0\4\34\1\131\11\34\3\0" +
                    "\4\34\1\0\1\131\6\34\11\0\11\34\25\0\1\45" +
                    "\21\0\1\45\4\0\1\45\44\0\6\34\1\131\7\34" +
                    "\3\0\4\34\1\0\7\34\11\0\10\34\1\132\21\0" +
                    "\16\34\3\0\4\34\1\0\2\34\1\133\4\34\11\0" +
                    "\2\34\1\133\6\34\21\0\4\34\1\134\11\34\3\0" +
                    "\4\34\1\0\1\134\6\34\11\0\11\34\21\0\5\34" +
                    "\1\135\10\34\3\0\2\34\1\135\1\34\1\0\7\34" +
                    "\11\0\11\34\37\0\1\136\61\0\16\34\3\0\1\34" +
                    "\2\137\1\140\1\0\7\34\11\0\5\34\1\140\3\34" +
                    "\25\0\1\141\15\0\1\141\3\0\7\141\71\0\1\142" +
                    "\51\0\16\34\3\0\4\34\1\0\2\34\1\143\4\34" +
                    "\11\0\2\34\1\143\6\34\25\0\1\144\21\0\1\144" +
                    "\44\0\43\145\1\146\1\147\33\145\44\150\1\151\1\146" +
                    "\32\150\44\152\1\153\1\152\1\146\31\152\23\154\1\155" +
                    "\17\154\1\0\1\156\2\154\1\157\1\160\27\154\23\0" +
                    "\1\161\24\0\1\162\34\0\16\34\3\0\1\34\1\163" +
                    "\2\34\1\0\7\34\11\0\6\34\1\163\2\34\100\0" +
                    "\1\164\100\0\1\165\35\0\1\166\61\0\12\34\1\167" +
                    "\3\34\3\0\4\34\1\0\6\34\1\167\11\0\11\34" +
                    "\21\0\13\34\1\170\2\34\3\0\4\34\1\0\7\34" +
                    "\11\0\11\34\20\0\1\105\5\0\1\171\4\0\1\172" +
                    "\3\0\1\106\4\0\1\171\10\0\1\172\42\0\1\106" +
                    "\120\0\1\173\77\0\1\174\57\0\16\111\2\0\1\174" +
                    "\1\0\3\111\1\0\7\111\11\0\11\111\21\0\16\114" +
                    "\2\0\1\174\4\114\1\0\7\114\11\0\11\114\21\0" +
                    "\16\113\2\0\1\174\1\114\3\113\1\0\7\113\11\0" +
                    "\11\113\21\0\16\114\3\0\4\114\1\0\7\114\11\0" +
                    "\11\114\21\0\4\115\1\34\3\115\2\34\4\115\3\0" +
                    "\1\34\3\115\1\0\1\34\4\115\1\34\1\115\11\0" +
                    "\11\115\21\0\4\32\1\34\3\32\2\34\4\32\3\0" +
                    "\1\34\3\32\1\0\1\34\1\32\1\175\2\32\1\34" +
                    "\1\32\11\0\2\32\1\175\6\32\21\0\1\176\3\32" +
                    "\1\34\3\32\2\34\4\32\3\0\1\34\3\32\1\0" +
                    "\1\34\4\32\1\34\1\32\11\0\11\32\21\0\4\32" +
                    "\1\34\3\32\2\34\4\32\3\0\1\34\3\32\1\0" +
                    "\1\34\1\32\1\177\2\32\1\34\1\32\11\0\2\32" +
                    "\1\177\6\32\21\0\4\32\1\34\3\32\2\34\1\200" +
                    "\3\32\3\0\1\34\3\32\1\0\1\34\4\32\1\34" +
                    "\1\200\11\0\11\32\21\0\4\32\1\34\2\32\1\201" +
                    "\2\34\4\32\3\0\1\34\3\32\1\0\1\34\3\32" +
                    "\1\201\1\34\1\32\11\0\11\32\21\0\4\32\1\34" +
                    "\1\202\2\32\2\34\4\32\3\0\1\34\1\32\1\202" +
                    "\1\32\1\0\1\34\4\32\1\34\1\32\11\0\11\32" +
                    "\21\0\4\32\1\34\3\32\2\34\4\32\3\0\1\34" +
                    "\3\32\1\0\1\34\4\32\1\34\1\32\11\0\3\32" +
                    "\1\203\5\32\21\0\4\32\1\34\3\32\2\34\4\32" +
                    "\3\0\1\34\3\32\1\0\1\34\1\32\1\204\2\32" +
                    "\1\34\1\32\11\0\2\32\1\204\6\32\21\0\4\32" +
                    "\1\34\1\32\1\205\1\32\2\34\4\32\3\0\1\34" +
                    "\3\32\1\0\1\34\4\32\1\34\1\32\11\0\11\32" +
                    "\21\0\6\34\1\206\7\34\3\0\4\34\1\0\7\34" +
                    "\11\0\11\34\21\0\16\34\3\0\4\34\1\0\7\34" +
                    "\11\0\10\34\1\207\14\0\1\145\3\0\74\145\1\150" +
                    "\3\0\74\150\1\152\3\0\74\152\43\154\1\0\1\156" +
                    "\3\154\1\160\30\154\3\0\74\154\5\0\16\34\3\0" +
                    "\4\34\1\0\7\34\11\0\10\34\1\210\21\0\15\34" +
                    "\1\211\3\0\4\34\1\0\7\34\11\0\11\34\21\0" +
                    "\14\34\1\211\1\34\3\0\4\34\1\0\7\34\11\0" +
                    "\11\34\33\0\1\212\21\0\1\212\56\0\1\213\64\0" +
                    "\4\32\1\34\3\32\2\34\4\32\3\0\1\34\1\214" +
                    "\2\32\1\0\1\34\4\32\1\34\1\32\11\0\4\32" +
                    "\2\215\1\214\2\32\21\0\4\32\1\34\3\32\2\34" +
                    "\4\32\3\0\1\34\3\32\1\0\1\34\4\32\1\34" +
                    "\1\32\11\0\4\32\2\216\3\32\21\0\4\32\1\34" +
                    "\3\32\2\34\3\32\1\217\3\0\1\34\3\32\1\0" +
                    "\1\34\4\32\1\34\1\32\11\0\11\32\21\0\4\32" +
                    "\1\34\3\32\2\34\4\32\3\0\1\34\3\32\1\0" +
                    "\1\34\4\32\1\34\1\32\11\0\1\32\1\220\7\32" +
                    "\21\0\4\32\1\34\3\32\2\34\4\32\3\0\1\34" +
                    "\3\32\1\0\1\34\1\32\1\221\2\32\1\34\1\32" +
                    "\11\0\2\32\1\221\4\32\1\222\1\223\21\0\4\32" +
                    "\1\34\3\32\2\34\1\224\3\32\3\0\1\34\3\32" +
                    "\1\0\1\34\4\32\1\34\1\224\11\0\11\32\21\0" +
                    "\4\32\1\34\1\32\1\225\1\32\2\34\4\32\3\0" +
                    "\1\34\3\32\1\0\1\34\4\32\1\34\1\32\11\0" +
                    "\11\32\21\0\4\32\1\34\3\32\2\34\4\32\3\0" +
                    "\1\34\3\32\1\0\1\34\4\32\1\34\1\32\11\0" +
                    "\10\32\1\226\21\0\4\32\1\34\3\32\2\34\3\32" +
                    "\1\227\3\0\1\34\3\32\1\0\1\34\4\32\1\34" +
                    "\1\32\11\0\11\32\36\0\1\230\76\0\1\230\63\0" +
                    "\1\231\3\32\1\34\3\32\2\34\4\32\3\0\1\34" +
                    "\3\32\1\0\1\34\4\32\1\34\1\32\11\0\11\32" +
                    "\21\0\4\32\1\34\3\32\2\34\2\32\1\232\1\32" +
                    "\3\0\1\34\3\32\1\0\1\34\4\32\1\34\1\32" +
                    "\11\0\11\32\21\0\1\233\3\32\1\34\3\32\2\34" +
                    "\4\32\3\0\1\34\3\32\1\0\1\34\4\32\1\34" +
                    "\1\32\11\0\11\32\21\0\4\32\1\34\3\32\2\34" +
                    "\4\32\3\0\1\34\3\32\1\0\1\34\4\32\1\34" +
                    "\1\32\11\0\3\32\1\234\5\32\21\0\4\32\1\34" +
                    "\3\32\2\34\4\32\3\0\1\34\3\32\1\0\1\34" +
                    "\4\32\1\34\1\32\11\0\1\32\1\235\7\32\21\0" +
                    "\4\32\1\34\2\32\1\236\2\34\4\32\3\0\1\34" +
                    "\3\32\1\0\1\34\3\32\1\236\1\34\1\32\11\0" +
                    "\11\32\21\0\4\32\1\34\3\32\2\34\4\32\3\0" +
                    "\1\34\3\32\1\0\1\34\4\32\1\34\1\32\11\0" +
                    "\3\32\1\237\5\32\21\0\4\32\1\34\3\32\2\34" +
                    "\1\240\3\32\3\0\1\34\3\32\1\0\1\34\4\32" +
                    "\1\34\1\240\11\0\11\32\21\0\4\32\1\34\3\32" +
                    "\2\34\4\32\3\0\1\34\3\32\1\0\1\34\4\32" +
                    "\1\34\1\32\11\0\1\32\1\241\7\32\14\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[6720];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\7\0\2\11\5\1\1\11\6\1\1\11\36\1\1\11" +
                    "\4\1\11\11\2\1\1\0\21\1\2\11\5\1\1\11" +
                    "\6\1\1\0\1\11\6\0\1\1\1\0\2\1\2\11" +
                    "\1\1\3\11\2\1\2\0\2\11\15\1\2\0\14\1" +
                    "\1\0\11\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[161];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _M68kLexer() {
        this((java.io.Reader) null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _M68kLexer(java.io.Reader in) {
        zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 71:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 72:
                        break;
                    case 3: {
                        yybegin(NOSOL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 73:
                        break;
                    case 4: {
                        yybegin(INSTRPART);
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 74:
                        break;
                    case 5: {
                        return COMMENT;
                    }
                    // fall through
                    case 75:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 76:
                        break;
                    case 7: {
                        if (isAsmMnemonic(yytext())) {
                            yybegin(ASMINSTR);
                            return MNEMONIC;
                        } else {
                            yybegin(INSTRPART);
                            return SYMBOL;
                        }
                    }
                    // fall through
                    case 77:
                        break;
                    case 8: {
                        yybegin(INSTRPART);
                        return SYMBOL;
                    }
                    // fall through
                    case 78:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return COMMENT;
                    }
                    // fall through
                    case 79:
                        break;
                    case 10: {
                        yybegin(YYINITIAL);
                        return EOL;
                    }
                    // fall through
                    case 80:
                        break;
                    case 11: {
                        if (isAsmMnemonic(yytext())) {
                            yybegin(ASMINSTR);
                            return MNEMONIC;
                        } else {
                            return SYMBOL;
                        }
                    }
                    // fall through
                    case 81:
                        break;
                    case 12: {
                        return SYMBOL;
                    }
                    // fall through
                    case 82:
                        break;
                    case 13: {
                        yybegin(WAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 83:
                        break;
                    case 14: {
                        yybegin(ASMOPS);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 15: {
                        return DECIMAL;
                    }
                    // fall through
                    case 85:
                        break;
                    case 16: {
                        return OP_ASSIGN;
                    }
                    // fall through
                    case 86:
                        break;
                    case 17: {
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 87:
                        break;
                    case 18: {
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 88:
                        break;
                    case 19: {
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 89:
                        break;
                    case 20: {
                        return HASH;
                    }
                    // fall through
                    case 90:
                        break;
                    case 21: {
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 91:
                        break;
                    case 22: {
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 92:
                        break;
                    case 23: {
                        return OP_UNARY_NOT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 24: {
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 94:
                        break;
                    case 25: {
                        return ROUND_L;
                    }
                    // fall through
                    case 95:
                        break;
                    case 26: {
                        return ROUND_R;
                    }
                    // fall through
                    case 96:
                        break;
                    case 27: {
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 97:
                        break;
                    case 28: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 98:
                        break;
                    case 29: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 99:
                        break;
                    case 30: {
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 100:
                        break;
                    case 31: {
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 101:
                        break;
                    case 32: {
                        return SEPARATOR;
                    }
                    // fall through
                    case 102:
                        break;
                    case 33: {
                        yybegin(ASSIGNMENT);
                        yypushback(pushbackAssignment(yytext()));
                        return SYMBOLDEF;
                    }
                    // fall through
                    case 103:
                        break;
                    case 34: {
                        yybegin(INSTRPART);
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 104:
                        break;
                    case 35: {
                        return IF_TAG;
                    }
                    // fall through
                    case 105:
                        break;
                    case 36: {
                        return OPSIZE_BS;
                    }
                    // fall through
                    case 106:
                        break;
                    case 37: {
                        return OPSIZE_WL;
                    }
                    // fall through
                    case 107:
                        break;
                    case 38: {
                        return AREG;
                    }
                    // fall through
                    case 108:
                        break;
                    case 39: {
                        return REG_SR;
                    }
                    // fall through
                    case 109:
                        break;
                    case 40: {
                        return PC;
                    }
                    // fall through
                    case 110:
                        break;
                    case 41: {
                        return DREG;
                    }
                    // fall through
                    case 111:
                        break;
                    case 42: {
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 112:
                        break;
                    case 43: {
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 113:
                        break;
                    case 44: {
                        return BINARY;
                    }
                    // fall through
                    case 114:
                        break;
                    case 45: {
                        return OCTAL;
                    }
                    // fall through
                    case 115:
                        break;
                    case 46: {
                        return STRINGLIT;
                    }
                    // fall through
                    case 116:
                        break;
                    case 47: {
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 117:
                        break;
                    case 48: {
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 118:
                        break;
                    case 49: {
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 119:
                        break;
                    case 50: {
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 120:
                        break;
                    case 51: {
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 121:
                        break;
                    case 52: {
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 122:
                        break;
                    case 53: {
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 123:
                        break;
                    case 54: {
                        return END_TAG;
                    }
                    // fall through
                    case 124:
                        break;
                    case 55: {
                        return REG_USP;
                    }
                    // fall through
                    case 125:
                        break;
                    case 56: {
                        return REG_CCR;
                    }
                    // fall through
                    case 126:
                        break;
                    case 57: {
                        return REG_VBR;
                    }
                    // fall through
                    case 127:
                        break;
                    case 58: {
                        return EQU;
                    }
                    // fall through
                    case 128:
                        break;
                    case 59: {
                        return FAIL_TAG;
                    }
                    // fall through
                    case 129:
                        break;
                    case 60: {
                        return EVEN_TAG;
                    }
                    // fall through
                    case 130:
                        break;
                    case 61: {
                        return ENDC_TAG;
                    }
                    // fall through
                    case 131:
                        break;
                    case 62: {
                        return MACRO_END_TAG;
                    }
                    // fall through
                    case 132:
                        break;
                    case 63: {
                        return REPT_END_TAG;
                    }
                    // fall through
                    case 133:
                        break;
                    case 64: {
                        return ELSE_TAG;
                    }
                    // fall through
                    case 134:
                        break;
                    case 65: {
                        return CNOP_TAG;
                    }
                    // fall through
                    case 135:
                        break;
                    case 66: {
                        return REPT_TAG;
                    }
                    // fall through
                    case 136:
                        break;
                    case 67: {
                        return MACRO_TAG;
                    }
                    // fall through
                    case 137:
                        break;
                    case 68: {
                        return INCBIN_TAG;
                    }
                    // fall through
                    case 138:
                        break;
                    case 69: {
                        return INCLUDE_TAG;
                    }
                    // fall through
                    case 139:
                        break;
                    case 70: {
                        return SECTION_TAG;
                    }
                    // fall through
                    case 140:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
