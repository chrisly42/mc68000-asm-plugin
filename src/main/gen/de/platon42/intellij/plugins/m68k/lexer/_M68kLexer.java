/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.platon42.intellij.plugins.m68k.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.platon42.intellij.plugins.m68k.lexer.LexerUtil.*;
import static de.platon42.intellij.plugins.m68k.psi.M68kTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NOSOL = 2;
    public static final int INSTRPART = 4;
    public static final int ASMINSTR = 6;
    public static final int ASMOPS = 8;
    public static final int ASMOPS_OP = 10;
    public static final int ASSIGNMENT = 12;
    public static final int EXPR = 14;
    public static final int EXPR_OP = 16;
    public static final int MACROCALL = 18;
    public static final int WAITEOL = 20;
    public static final int MACRODEF = 22;
    public static final int MACROLINE = 24;
    public static final int MACROTERMINATION = 26;
    public static final int MACROWAITEOL = 28;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 14464 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                    "\53\4\14\1\54\12\11\1\55\u0381\11");

    /* The ZZ_CMAP_Y table has 2944 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\7" +
                    "\13\1\15\24\13\1\16\1\17\1\20\10\1\1\21\1\22\1\13\1\23\4\13\1\24\10\13\1\25" +
                    "\12\13\1\26\1\13\1\27\1\26\1\13\1\30\4\1\1\13\1\31\1\32\2\1\2\13\1\31\1\1" +
                    "\1\33\1\26\5\13\1\34\1\35\1\36\1\1\1\37\1\13\1\1\1\40\5\13\1\41\1\42\1\43" +
                    "\1\13\1\31\1\44\1\13\1\45\1\46\1\1\1\13\1\47\4\1\1\13\1\50\4\1\1\51\2\13\1" +
                    "\52\1\1\1\53\1\54\1\26\1\55\1\56\1\57\1\60\1\61\1\62\1\54\1\17\1\63\1\56\1" +
                    "\57\1\64\1\1\1\65\1\66\1\67\1\70\1\23\1\57\1\71\1\1\1\72\1\54\1\73\1\74\1" +
                    "\56\1\57\1\71\1\1\1\62\1\54\1\42\1\75\1\76\1\77\1\100\1\1\1\72\1\66\1\1\1" +
                    "\101\1\37\1\57\1\52\1\1\1\102\1\54\1\1\1\103\1\37\1\57\1\104\1\1\1\61\1\54" +
                    "\1\105\1\101\1\37\1\13\1\106\1\61\1\107\1\54\1\110\1\111\1\112\1\13\1\113" +
                    "\1\114\1\1\1\66\1\1\1\26\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121\1\122" +
                    "\1\123\1\124\2\1\1\72\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2\13\1" +
                    "\31\1\130\1\116\1\131\1\132\1\133\1\134\1\116\2\13\1\135\2\13\1\136\24\13" +
                    "\1\137\1\140\2\13\1\137\2\13\1\141\1\142\1\14\3\13\1\142\3\13\1\31\2\1\1\13" +
                    "\1\1\5\13\1\143\1\26\45\13\1\144\1\13\1\145\1\31\4\13\1\31\1\146\1\147\1\17" +
                    "\1\13\1\17\1\13\1\17\1\147\1\72\3\13\1\150\1\1\1\151\1\116\2\1\1\116\5\13" +
                    "\1\30\1\152\1\13\1\153\4\13\1\41\1\13\1\154\2\1\1\66\1\13\1\155\1\156\2\13" +
                    "\1\157\1\13\1\100\1\116\2\1\1\13\1\114\3\13\1\156\2\1\2\116\1\160\5\1\1\111" +
                    "\2\13\1\150\1\161\1\116\2\1\1\162\1\13\1\163\1\43\2\13\1\41\1\1\2\13\1\150" +
                    "\1\1\1\164\1\43\1\13\1\155\1\47\5\1\1\165\1\166\14\13\4\1\21\13\1\143\2\13" +
                    "\1\143\1\167\1\13\1\155\3\13\1\170\1\171\1\172\1\126\1\171\1\173\1\1\1\174" +
                    "\2\1\1\175\1\1\1\176\1\1\1\126\6\1\1\177\1\200\1\201\1\202\1\203\3\1\1\204" +
                    "\147\1\2\13\1\154\2\13\1\154\10\13\1\205\1\206\2\13\1\135\3\13\1\207\1\1\1" +
                    "\13\1\114\4\210\4\1\1\130\35\1\1\211\2\1\1\212\1\26\4\13\1\213\1\26\4\13\1" +
                    "\136\1\111\1\13\1\155\1\26\4\13\1\154\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1" +
                    "\41\4\1\135\13\1\41\2\1\10\13\1\126\4\1\2\13\1\155\20\13\1\126\1\13\1\214" +
                    "\1\1\2\13\1\154\1\130\1\13\1\155\4\13\1\41\2\1\1\215\1\216\5\13\1\217\1\13" +
                    "\1\154\1\30\3\1\1\215\1\220\1\13\1\32\1\1\3\13\1\150\1\216\2\13\1\150\1\1" +
                    "\1\116\1\1\1\221\1\43\1\13\1\41\1\13\1\114\1\1\1\13\1\126\1\51\2\13\1\32\1" +
                    "\130\1\116\1\222\1\223\2\13\1\47\1\1\1\224\1\116\1\13\1\225\3\13\1\226\1\227" +
                    "\1\230\1\31\1\67\1\231\1\232\1\210\2\13\1\136\1\41\7\13\1\32\1\116\72\13\1" +
                    "\150\1\13\1\233\2\13\1\157\20\1\26\13\1\155\6\13\1\100\2\1\1\114\1\234\1\57" +
                    "\1\235\1\236\6\13\1\17\1\1\1\162\25\13\1\155\1\1\4\13\1\216\2\13\1\30\2\1" +
                    "\1\157\7\1\1\222\7\13\1\126\1\1\1\116\1\26\1\31\1\26\1\31\1\237\4\13\1\154" +
                    "\1\240\1\241\2\1\1\242\1\13\1\14\1\243\2\155\2\1\7\13\1\31\30\1\1\13\1\126" +
                    "\3\13\1\72\2\1\2\13\1\1\1\13\1\244\2\13\1\41\1\13\1\155\2\13\1\245\3\1\11" +
                    "\13\1\155\1\116\2\13\1\245\1\13\1\157\2\13\1\30\3\13\1\150\11\1\23\13\1\114" +
                    "\1\13\1\41\1\30\11\1\1\246\2\13\1\247\1\13\1\41\1\13\1\114\1\13\1\154\4\1" +
                    "\1\13\1\250\1\13\1\41\1\13\1\100\4\1\3\13\1\251\4\1\1\72\1\252\1\13\1\150" +
                    "\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1\13\1\156\1\1\3\13\1\41\1\13\1\41\1" +
                    "\13\1\32\1\13\1\17\6\1\4\13\1\47\3\1\3\13\1\32\3\13\1\32\60\1\1\162\2\13\1" +
                    "\30\2\1\1\66\1\1\1\162\2\13\2\1\1\13\1\47\1\116\1\162\1\13\1\114\1\66\1\1" +
                    "\2\13\1\253\1\162\2\13\1\32\1\254\1\255\2\1\1\13\1\23\1\157\5\1\1\256\1\257" +
                    "\1\47\2\13\1\154\1\1\1\116\1\74\1\56\1\57\1\71\1\1\1\260\1\17\11\1\3\13\1" +
                    "\156\1\261\1\116\2\1\3\13\1\1\1\262\1\116\12\1\2\13\1\154\2\1\1\263\2\1\3" +
                    "\13\1\1\1\264\1\116\2\1\2\13\1\31\1\1\1\116\3\1\1\13\1\100\1\1\1\116\26\1" +
                    "\4\13\1\116\1\130\34\1\3\13\1\47\20\1\1\57\1\13\1\154\1\1\1\72\1\116\1\1\1" +
                    "\216\1\13\67\1\71\13\1\100\16\1\14\13\1\150\53\1\2\13\1\154\75\1\44\13\1\114" +
                    "\33\1\43\13\1\47\1\13\1\154\1\116\6\1\1\13\1\155\1\1\3\13\1\1\1\150\1\116" +
                    "\1\162\1\265\1\13\67\1\4\13\1\156\1\72\3\1\1\162\4\1\1\72\1\1\76\13\1\126" +
                    "\1\1\57\13\1\32\20\1\1\17\77\1\6\13\1\31\1\126\1\47\1\100\66\1\5\13\1\222" +
                    "\3\13\1\147\1\266\1\267\1\270\3\13\1\271\1\272\1\13\1\273\1\274\1\37\24\13" +
                    "\1\275\1\13\1\37\1\136\1\13\1\136\1\13\1\222\1\13\1\222\1\154\1\13\1\154\1" +
                    "\13\1\57\1\13\1\57\1\13\1\276\3\277\14\13\1\156\3\1\4\13\1\150\1\116\112\1" +
                    "\1\270\1\13\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\157\1\307\1\157\24" +
                    "\1\55\13\1\114\2\1\103\13\1\156\15\13\1\155\150\13\1\17\25\1\41\13\1\155\36" +
                    "\1");

    /* The ZZ_CMAP_A table has 3200 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\57\1\47\1\53\1\24\1\40\1\64\1\46\1\55\1\56" +
                    "\1\63\1\61\1\52\1\62\1\23\1\66\2\41\5\6\1\10\2\43\1\14\1\32\1\50\1\22\1\51" +
                    "\1\0\1\44\1\5\1\71\1\26\1\7\1\15\1\42\5\11\1\37\1\25\1\31\1\30\1\67\1\16\1" +
                    "\27\1\20\1\21\1\17\1\70\1\36\3\11\1\0\1\33\1\0\1\54\1\12\1\45\1\5\1\34\1\26" +
                    "\1\7\1\15\1\42\5\11\1\37\1\25\1\31\1\30\1\67\1\16\1\27\1\35\1\21\1\17\1\70" +
                    "\1\36\3\11\1\0\1\65\1\0\1\60\6\0\1\1\12\0\1\4\11\0\1\11\12\0\1\11\4\0\1\11" +
                    "\5\0\27\11\1\0\27\11\1\20\2\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5" +
                    "\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\23" +
                    "\11\1\0\13\11\10\0\6\11\1\0\26\11\2\0\1\11\6\0\10\11\10\0\13\11\5\0\3\11\15" +
                    "\0\12\13\4\0\6\11\1\0\1\11\17\0\2\11\7\0\2\11\12\13\3\11\2\0\2\11\1\0\16\11" +
                    "\15\0\11\11\13\0\1\11\16\0\12\13\6\11\4\0\2\11\4\0\1\11\5\0\6\11\4\0\1\11" +
                    "\11\0\1\11\3\0\1\11\7\0\11\11\7\0\5\11\1\0\10\11\6\0\26\11\3\0\1\11\2\0\1" +
                    "\11\7\0\12\11\4\0\12\13\1\11\4\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11" +
                    "\3\0\4\11\3\0\1\11\20\0\1\11\15\0\2\11\1\0\1\11\5\0\6\11\4\0\2\11\1\0\2\11" +
                    "\1\0\2\11\1\0\2\11\17\0\4\11\1\0\1\11\7\0\12\13\2\0\3\11\20\0\11\11\1\0\2" +
                    "\11\1\0\2\11\1\0\5\11\3\0\1\11\2\0\1\11\30\0\1\11\13\0\10\11\2\0\1\11\3\0" +
                    "\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3" +
                    "\11\3\0\14\11\13\0\10\11\1\0\2\11\10\0\3\11\5\0\1\11\4\0\10\11\1\0\6\11\1" +
                    "\0\5\11\3\0\1\11\3\0\2\11\15\0\13\11\2\0\1\11\6\0\3\11\10\0\1\11\12\0\6\11" +
                    "\5\0\22\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11\11\0\1\11\1\0\2\11\14\0\12" +
                    "\13\7\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11" +
                    "\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\0\2\11\11\0\1\11\2\0\5\11\1\0\1\11" +
                    "\11\0\12\13\2\0\14\11\1\0\24\11\13\0\5\11\22\0\7\11\4\0\4\11\3\0\1\11\3\0" +
                    "\2\11\7\0\3\11\4\0\15\11\14\0\1\11\1\0\6\11\1\0\1\11\5\0\1\11\2\0\13\11\1" +
                    "\0\15\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\1\11\1\0\4\11\2\0\7\11\1" +
                    "\0\1\11\1\0\4\11\2\0\16\11\2\0\6\11\2\0\15\11\2\0\1\11\1\4\17\11\1\0\10\11" +
                    "\7\0\15\11\1\0\6\11\23\0\1\11\4\0\1\11\3\0\5\11\2\0\22\11\1\0\1\11\5\0\17" +
                    "\11\1\0\16\11\2\0\5\11\13\0\14\11\13\0\1\11\15\0\7\11\7\0\16\11\15\0\2\11" +
                    "\12\13\3\0\3\11\11\0\4\11\1\0\4\11\3\0\2\11\11\0\10\11\1\0\1\11\1\0\1\11\1" +
                    "\0\1\11\1\0\6\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0" +
                    "\13\4\15\0\2\1\5\0\1\4\17\0\1\4\1\0\1\11\15\0\1\11\2\0\1\11\4\0\1\11\2\0\12" +
                    "\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11\2\0\4" +
                    "\11\5\0\5\11\4\0\1\11\4\0\2\11\13\0\5\11\6\0\4\11\3\0\2\11\14\0\10\11\7\0" +
                    "\10\11\1\0\7\11\1\0\1\4\4\0\2\11\12\0\5\11\5\0\2\11\3\0\7\11\6\0\3\11\12\13" +
                    "\2\11\13\0\11\11\2\0\27\11\2\0\7\11\1\0\3\11\1\0\4\11\1\0\4\11\2\0\6\11\3" +
                    "\0\1\11\1\0\1\11\2\0\5\11\1\0\12\11\12\13\5\11\1\0\3\11\1\0\10\11\4\0\7\11" +
                    "\3\0\1\11\3\0\2\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\0\3\11" +
                    "\3\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\4\0\5\11\3\0\5\11\5\0\1\11\1\0\10\11" +
                    "\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\12\11\6\0\12\11\2\0\6\11\2\0\6\11" +
                    "\2\0\6\11\2\0\3\11\3\0\14\11\1\0\16\11\1\0\2\11\1\0\2\11\1\0\10\11\6\0\4\11" +
                    "\4\0\16\11\2\0\1\11\1\0\14\11\1\0\2\11\3\0\1\11\2\0\4\11\1\0\2\11\12\0\10" +
                    "\11\6\0\6\11\1\0\3\11\1\0\12\11\3\0\1\11\12\0\4\11\13\0\12\13\1\11\1\0\1\11" +
                    "\3\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0\2\11\14\0\3\11\7\0\4\11\11\0\2\11" +
                    "\1\0\1\11\20\0\4\11\10\0\1\11\13\0\10\11\5\0\3\11\2\0\1\11\2\0\2\11\2\0\4" +
                    "\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0\21\11\1\0\4\11\2\0\10\11\1\0\7\11\1\0" +
                    "\14\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\14\11\2\0\13\11\1\0\10\11\2\0\22\13" +
                    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11" +
                    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1" +
                    "\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0" +
                    "\4\11\1\0\1\11\1\0\12\11\1\0\5\11\1\0\3\11\1\0\5\11\1\0\5\11");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\17\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6" +
                    "\1\7\1\10\1\1\1\7\2\11\1\7\1\10\1\12" +
                    "\1\13\1\14\1\1\1\15\1\16\1\17\4\16\1\1" +
                    "\1\16\5\1\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\1\26\1\27\1\30\1\31\2\16\1\32\1\33\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\42\1\50\2\1\1\51\1\16" +
                    "\1\52\1\11\4\52\1\53\1\11\2\54\2\55\1\56" +
                    "\1\57\3\60\1\57\1\60\1\0\1\4\1\61\2\62" +
                    "\1\63\3\0\1\7\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\16\1\72\1\73\1\16\1\74\1\75\2\0" +
                    "\1\76\4\0\1\77\1\16\1\32\1\100\1\101\1\102" +
                    "\1\103\1\104\1\105\1\106\3\0\1\52\1\0\1\52" +
                    "\1\0\1\52\1\0\1\52\1\55\1\57\3\0\1\4" +
                    "\1\62\1\63\1\7\1\107\1\7\1\110\1\111\1\112" +
                    "\1\113\1\0\1\52\3\0\1\55\1\57\3\0\1\7" +
                    "\1\55\1\57\2\0\1\114\1\115\1\116\1\0\1\117";

    private static int[] zzUnpackAction() {
        int[] result = new int[184];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196" +
                    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366" +
                    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc" +
                    "\0\u0536\0\u0570\0\u05aa\0\u0366\0\u05e4\0\u061e\0\u0658\0\u0366" +
                    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828" +
                    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8" +
                    "\0\u0a32\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366" +
                    "\0\u0366\0\u0366\0\u0366\0\u0a6c\0\u0aa6\0\u0ae0\0\u0366\0\u0b1a" +
                    "\0\u0b54\0\u0366\0\u0366\0\u0366\0\u0366\0\u0b8e\0\u0366\0\u0366" +
                    "\0\u0366\0\u0366\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0366" +
                    "\0\u0cea\0\u0d24\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46" +
                    "\0\u0e46\0\u0366\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0f68" +
                    "\0\u0366\0\u0fa2\0\u0fdc\0\u0e46\0\u1016\0\u1050\0\u108a\0\u10c4" +
                    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u0366\0\u0366" +
                    "\0\u0366\0\u0828\0\u0828\0\u0828\0\u125a\0\u0828\0\u08d6\0\u1294" +
                    "\0\u094a\0\u0984\0\u09be\0\u12ce\0\u0366\0\u09f8\0\u1308\0\u0a32" +
                    "\0\u1342\0\u0828\0\u137c\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366" +
                    "\0\u0366\0\u0366\0\u0366\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e" +
                    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e" +
                    "\0\u16a8\0\u16e2\0\u0366\0\u0366\0\u0366\0\u0366\0\u0366\0\u171c" +
                    "\0\u0828\0\u0828\0\u0828\0\u0366\0\u1756\0\u0366\0\u1790\0\u17ca" +
                    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a" +
                    "\0\u19d4\0\u108a\0\u1a0e\0\u04fc\0\u0eba\0\u1a48\0\u1a82\0\u1abc";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[184];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\20\2\21\1\22\1\23\1\24\1\20\1\24\1\20" +
                    "\2\24\2\20\5\24\1\20\1\25\1\20\5\24\1\26" +
                    "\1\20\4\24\2\20\1\24\10\20\1\26\7\20\1\26" +
                    "\3\20\3\24\1\20\2\21\1\22\1\27\1\30\1\20" +
                    "\1\30\1\20\1\30\1\31\2\20\5\30\1\20\1\32" +
                    "\1\20\1\33\4\30\1\26\1\20\4\30\2\20\1\30" +
                    "\10\20\1\26\7\20\1\26\3\20\3\30\1\20\2\34" +
                    "\1\35\1\27\1\36\1\20\1\36\1\20\1\36\1\37" +
                    "\1\20\1\40\5\36\3\20\5\36\1\41\1\20\4\36" +
                    "\2\20\1\36\24\20\3\36\1\20\2\34\1\35\1\42" +
                    "\16\20\1\43\6\20\1\41\40\20\2\34\1\35\1\44" +
                    "\1\45\1\46\1\47\1\46\2\50\2\20\2\50\1\51" +
                    "\1\52\1\50\1\20\1\50\1\53\1\50\1\54\3\50" +
                    "\1\41\1\20\1\50\1\52\2\50\1\55\1\46\1\50" +
                    "\1\46\1\56\1\57\1\60\1\61\2\20\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" +
                    "\3\20\1\74\1\75\1\50\1\20\2\34\1\35\1\44" +
                    "\15\20\1\76\1\43\6\20\1\41\5\20\1\77\7\20" +
                    "\1\100\1\101\1\102\1\20\1\103\1\104\1\105\1\106" +
                    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\4\20" +
                    "\2\34\1\35\1\27\7\20\1\40\1\116\2\20\1\117" +
                    "\1\20\1\120\7\20\1\41\2\20\1\117\35\20\2\34" +
                    "\1\35\1\44\1\121\1\46\1\121\1\46\2\121\2\20" +
                    "\5\121\1\20\1\121\1\53\5\121\1\41\1\20\4\121" +
                    "\1\55\1\46\1\121\1\46\1\56\1\57\1\60\1\61" +
                    "\2\20\1\62\1\20\1\64\1\65\1\66\1\67\1\70" +
                    "\1\71\1\72\1\73\3\20\3\121\1\20\2\34\1\35" +
                    "\1\44\15\20\1\76\7\20\1\41\5\20\1\77\7\20" +
                    "\1\100\1\101\1\102\1\20\1\103\1\104\1\105\1\106" +
                    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\3\20" +
                    "\1\122\1\123\1\34\1\35\1\44\25\122\1\41\12\122" +
                    "\1\124\1\125\1\126\1\127\1\122\1\62\17\122\1\130" +
                    "\1\131\1\34\1\35\66\130\1\20\2\132\1\133\1\27" +
                    "\1\134\1\20\1\134\1\20\2\134\1\20\1\40\5\134" +
                    "\3\20\1\135\4\134\1\136\1\20\4\134\2\20\1\134" +
                    "\24\20\3\134\1\137\1\140\1\141\1\142\1\143\25\137" +
                    "\1\136\37\137\1\20\2\34\1\35\1\27\25\20\1\41" +
                    "\37\20\1\130\1\144\1\141\1\142\66\130\74\0\1\21" +
                    "\73\0\1\23\71\0\1\145\7\24\1\146\5\24\1\147" +
                    "\1\0\1\150\5\24\2\0\4\24\1\0\3\24\23\0" +
                    "\3\24\5\0\1\151\1\0\1\151\1\0\2\151\2\0" +
                    "\5\151\3\0\5\151\2\0\4\151\2\0\1\151\24\0" +
                    "\3\151\1\26\3\0\66\26\4\0\1\27\72\0\1\30" +
                    "\1\31\1\30\1\31\1\30\2\31\1\152\5\30\1\0" +
                    "\1\153\1\154\5\30\2\0\4\30\1\0\1\31\1\30" +
                    "\1\31\23\0\3\30\5\0\7\31\1\152\5\31\2\0" +
                    "\1\154\5\31\2\0\4\31\1\0\3\31\23\0\3\31" +
                    "\5\0\1\155\1\0\1\155\1\0\2\155\2\0\5\155" +
                    "\3\0\5\155\2\0\4\155\2\0\1\155\24\0\3\155" +
                    "\5\0\1\156\1\31\1\30\1\31\1\30\2\31\1\152" +
                    "\5\30\1\0\1\153\1\154\5\30\2\0\4\30\1\0" +
                    "\1\31\1\30\1\31\23\0\3\30\2\0\1\34\74\0" +
                    "\1\36\1\37\1\36\1\37\1\36\2\37\1\0\5\36" +
                    "\1\0\1\153\1\0\5\36\2\0\4\36\1\0\1\37" +
                    "\1\36\1\37\23\0\3\36\5\0\7\37\1\0\5\37" +
                    "\3\0\5\37\2\0\4\37\1\0\3\37\23\0\3\37" +
                    "\1\41\3\0\66\41\4\0\1\42\121\0\2\157\1\160" +
                    "\1\161\36\0\1\44\72\0\1\50\1\162\1\50\1\163" +
                    "\3\50\1\0\5\50\2\0\6\50\2\0\4\50\1\0" +
                    "\1\162\2\50\23\0\3\50\6\0\1\46\1\0\1\46" +
                    "\30\0\1\46\1\0\1\46\33\0\1\50\1\164\1\50" +
                    "\1\164\3\50\1\0\5\50\2\0\6\50\2\0\4\50" +
                    "\1\0\1\164\2\50\23\0\3\50\5\0\7\50\1\0" +
                    "\5\50\2\0\6\50\2\0\4\50\1\0\3\50\23\0" +
                    "\3\50\5\0\7\50\1\0\3\50\1\165\1\50\2\0" +
                    "\6\50\2\0\1\50\1\165\2\50\1\0\3\50\23\0" +
                    "\3\50\5\0\7\50\1\0\5\50\2\0\3\50\1\166" +
                    "\2\50\2\0\4\50\1\0\3\50\23\0\1\163\2\50" +
                    "\5\0\4\167\4\0\1\167\10\0\1\167\5\0\1\167" +
                    "\4\0\3\167\25\0\1\167\5\0\7\50\1\0\5\50" +
                    "\2\0\2\50\1\170\3\50\2\0\4\50\1\0\3\50" +
                    "\23\0\3\50\41\0\1\171\36\0\1\172\1\0\1\172" +
                    "\30\0\1\172\30\0\2\173\2\0\27\173\1\174\11\173" +
                    "\1\175\24\173\2\176\2\0\27\176\1\177\12\176\1\175" +
                    "\23\176\2\200\2\0\27\200\1\201\13\200\1\175\22\200" +
                    "\5\0\7\50\1\0\5\50\2\0\2\50\1\202\3\50" +
                    "\2\0\4\50\1\0\3\50\23\0\3\50\5\0\7\50" +
                    "\1\0\5\50\2\0\6\50\2\0\1\203\3\50\1\0" +
                    "\3\50\23\0\2\50\1\203\22\0\1\204\71\0\1\205" +
                    "\25\0\1\206\1\207\42\0\1\210\26\0\1\211\42\0" +
                    "\1\207\133\0\1\212\72\0\1\213\72\0\1\77\21\0" +
                    "\1\214\70\0\1\215\61\0\7\121\1\0\5\121\1\0" +
                    "\7\121\1\0\5\121\1\0\3\121\23\0\3\121\2\122" +
                    "\3\0\25\122\1\0\17\122\1\0\17\122\2\124\2\0" +
                    "\1\216\25\124\1\216\1\217\11\124\1\122\4\124\1\216" +
                    "\17\124\2\125\2\0\1\220\25\125\1\220\1\221\12\125" +
                    "\1\122\3\125\1\220\17\125\2\126\2\0\1\222\25\126" +
                    "\1\222\1\223\13\126\1\122\2\126\1\222\17\126\2\127" +
                    "\2\0\1\224\25\127\1\224\1\225\15\127\1\122\1\224" +
                    "\17\127\2\130\2\0\66\130\2\0\1\132\74\0\7\134" +
                    "\1\0\5\134\3\0\5\134\2\0\4\134\1\0\3\134" +
                    "\23\0\3\134\5\0\1\226\6\134\1\0\5\134\3\0" +
                    "\5\134\2\0\4\134\1\0\3\134\23\0\3\134\1\136" +
                    "\3\0\66\136\2\137\2\0\26\137\1\0\37\137\2\0" +
                    "\1\141\67\0\2\137\2\0\1\143\10\137\1\227\14\137" +
                    "\1\0\37\137\4\0\1\145\10\0\1\230\2\0\1\231" +
                    "\1\0\1\147\2\0\1\232\7\0\1\231\40\0\1\145" +
                    "\7\0\1\233\5\0\1\147\2\0\1\232\50\0\1\147" +
                    "\101\0\1\234\62\0\7\151\1\234\5\151\3\0\5\151" +
                    "\2\0\4\151\1\0\3\151\23\0\3\151\14\0\1\235" +
                    "\55\0\1\236\3\0\66\236\14\0\1\237\62\0\7\155" +
                    "\1\237\5\155\3\0\5\155\2\0\4\155\1\0\3\155" +
                    "\23\0\3\155\5\0\1\30\1\31\1\30\1\31\1\30" +
                    "\2\31\1\152\5\30\1\0\1\153\1\154\1\30\1\240" +
                    "\3\30\2\0\4\30\1\0\1\31\1\30\1\31\23\0" +
                    "\3\30\5\0\7\50\1\0\5\50\2\0\6\50\2\0" +
                    "\4\50\1\0\3\50\23\0\1\241\2\50\5\0\7\50" +
                    "\1\0\5\50\2\0\3\50\1\242\2\50\2\0\4\50" +
                    "\1\0\3\50\23\0\3\50\1\173\3\0\66\173\1\176" +
                    "\3\0\66\176\1\200\3\0\66\200\5\0\7\50\1\0" +
                    "\5\50\2\0\3\50\1\243\2\50\2\0\4\50\1\0" +
                    "\3\50\23\0\3\50\17\0\1\244\73\0\1\244\50\0" +
                    "\2\216\2\0\27\216\1\245\11\216\1\246\24\216\1\124" +
                    "\1\122\2\0\1\216\25\124\1\216\17\124\1\216\17\124" +
                    "\2\220\2\0\27\220\1\247\12\220\1\246\23\220\1\125" +
                    "\1\122\2\0\1\220\25\125\1\220\17\125\1\220\17\125" +
                    "\2\222\2\0\27\222\1\250\13\222\1\246\22\222\1\126" +
                    "\1\122\2\0\1\222\25\126\1\222\17\126\1\222\17\126" +
                    "\2\224\2\0\27\224\1\251\15\224\1\246\20\224\1\127" +
                    "\1\122\2\0\1\224\25\127\1\224\17\127\1\224\17\127" +
                    "\5\0\7\134\1\0\5\134\3\0\1\134\1\252\3\134" +
                    "\2\0\4\134\1\0\3\134\23\0\3\134\2\137\2\0" +
                    "\25\137\1\253\1\0\37\137\16\0\1\254\70\0\1\255" +
                    "\61\0\1\256\71\0\1\30\1\31\1\30\1\31\1\30" +
                    "\2\31\1\152\5\30\1\0\1\153\1\154\2\30\1\257" +
                    "\2\30\2\0\4\30\1\0\1\31\1\30\1\31\23\0" +
                    "\3\30\1\216\3\0\66\216\1\220\3\0\66\220\1\222" +
                    "\3\0\66\222\1\224\3\0\66\224\5\0\7\134\1\0" +
                    "\5\134\3\0\2\134\1\260\2\134\2\0\4\134\1\0" +
                    "\3\134\23\0\3\134\2\137\2\0\3\137\1\261\22\137" +
                    "\1\0\37\137\17\0\1\262\73\0\1\262\76\0\1\263" +
                    "\50\0\1\30\1\31\1\30\1\31\1\30\2\31\1\152" +
                    "\5\30\1\0\1\153\1\154\3\30\1\264\1\30\2\0" +
                    "\4\30\1\0\1\31\1\30\1\31\23\0\3\30\5\0" +
                    "\7\134\1\0\5\134\3\0\3\134\1\265\1\134\2\0" +
                    "\4\134\1\0\3\134\23\0\3\134\2\137\2\0\21\137" +
                    "\1\266\4\137\1\0\37\137\27\0\1\267\42\0\2\266" +
                    "\2\0\26\266\1\0\37\266\30\0\1\270\45\0\1\270" +
                    "\65\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[6902];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\17\0\2\11\12\1\1\11\3\1\1\11\21\1\12\11" +
                    "\3\1\1\11\2\1\4\11\1\1\4\11\5\1\1\11" +
                    "\11\1\1\11\6\1\1\11\3\1\1\0\5\1\3\0" +
                    "\1\1\3\11\11\1\2\0\1\11\4\0\2\1\10\11" +
                    "\3\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1" +
                    "\3\0\5\11\4\1\1\11\1\0\1\11\3\0\2\1" +
                    "\3\0\3\1\2\0\3\1\1\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[184];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    private M68kLexerPrefs lexerPrefs;
    boolean eatOneWhitespace = false;
    int macroLines = 0;
    int exprState = 0;
    int exprOpState = 0;

    public M68kLexerPrefs getLexerPrefs() {
        return lexerPrefs;
    }

    public _M68kLexer(M68kLexerPrefs lexerPrefs) {
        this((java.io.Reader) null);
        this.lexerPrefs = lexerPrefs;
    }

    private void startExpr(int newExprState, int newExprOpState) {
        exprState = newExprState;
        exprOpState = newExprOpState;
        yybegin(exprState);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _M68kLexer(java.io.Reader in) {
        zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 80:
                        break;
                    case 2: {
                        yybegin(YYINITIAL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 81:
                        break;
                    case 3: {
                        yybegin(NOSOL);
                        eatOneWhitespace = false;
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 82:
                        break;
                    case 4: {
                        yybegin(INSTRPART);
                        eatOneWhitespace = false;
                        yypushback(pushbackLabelColons(yytext()));
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 83:
                        break;
                    case 5: {
                        yybegin(YYINITIAL);
                        return COMMENT;
                    }
                    // fall through
                    case 84:
                        break;
                    case 6: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 85:
                        break;
                    case 7: {
                        if (isAsmMnemonicWithSize(yytext())) {
                            yybegin(ASMINSTR);
                            yypushback(2);
                            return MNEMONIC;
                        }
                        if (isAsmMnemonic(yytext())) {
                            yybegin(ASMINSTR);
                            return MNEMONIC;
                        }
                        if (isDataDirective(yytext())) {
                            startExpr(EXPR, EXPR_OP);
                            return DATA_DIRECTIVE;
                        }
                        if (isPlainDirective(yytext())) {
                            yybegin(MACROCALL);
                            return OTHER_DIRECTIVE;
                        }
                        if (isOtherDirective(yytext())) {
                            startExpr(EXPR, EXPR_OP);
                            return OTHER_DIRECTIVE;
                        }
                        return handleMacroMode(this);
                    }
                    // fall through
                    case 86:
                        break;
                    case 8: {
                        return handleMacroMode(this);
                    }
                    // fall through
                    case 87:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return EOL;
                    }
                    // fall through
                    case 88:
                        break;
                    case 10: {
                        return COLON;
                    }
                    // fall through
                    case 89:
                        break;
                    case 11: {
                        yybegin(WAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 90:
                        break;
                    case 12: {
                        startExpr(ASMOPS, ASMOPS_OP);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 91:
                        break;
                    case 13: {
                        return handleEolCommentWhitespace(this);
                    }
                    // fall through
                    case 92:
                        break;
                    case 14: {
                        yybegin(exprOpState);
                        return SYMBOL;
                    }
                    // fall through
                    case 93:
                        break;
                    case 15: {
                        yybegin(exprOpState);
                        return DECIMAL;
                    }
                    // fall through
                    case 94:
                        break;
                    case 16: {
                        return SEPARATOR;
                    }
                    // fall through
                    case 95:
                        break;
                    case 17: {
                        return HASH;
                    }
                    // fall through
                    case 96:
                        break;
                    case 18: {
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 97:
                        break;
                    case 19: {
                        return ROUND_L;
                    }
                    // fall through
                    case 98:
                        break;
                    case 20: {
                        yybegin(exprOpState);
                        return ROUND_R;
                    }
                    // fall through
                    case 99:
                        break;
                    case 21: {
                        return OP_UNARY_NOT;
                    }
                    // fall through
                    case 100:
                        break;
                    case 22: {
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 101:
                        break;
                    case 23: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 102:
                        break;
                    case 24: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 103:
                        break;
                    case 25: {
                        yybegin(exprOpState);
                        return CURRENT_PC_SYMBOL;
                    }
                    // fall through
                    case 104:
                        break;
                    case 26: {
                        yybegin(exprState);
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 105:
                        break;
                    case 27: {
                        yybegin(exprState);
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 106:
                        break;
                    case 28: {
                        yybegin(exprState);
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 107:
                        break;
                    case 29: {
                        yybegin(exprState);
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 108:
                        break;
                    case 30: {
                        yybegin(exprState);
                        return SEPARATOR;
                    }
                    // fall through
                    case 109:
                        break;
                    case 31: {
                        yybegin(exprState);
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 110:
                        break;
                    case 32: {
                        yybegin(exprState);
                        return ROUND_L;
                    }
                    // fall through
                    case 111:
                        break;
                    case 33: {
                        return ROUND_R;
                    }
                    // fall through
                    case 112:
                        break;
                    case 34: {
                        yybegin(exprState);
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 113:
                        break;
                    case 35: {
                        yybegin(exprState);
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 114:
                        break;
                    case 36: {
                        yybegin(exprState);
                        return OP_PLUS;
                    }
                    // fall through
                    case 115:
                        break;
                    case 37: {
                        yybegin(exprState);
                        return OP_MINUS;
                    }
                    // fall through
                    case 116:
                        break;
                    case 38: {
                        yybegin(exprState);
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 117:
                        break;
                    case 39: {
                        yybegin(exprState);
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 118:
                        break;
                    case 40: {
                        yybegin(exprState);
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 119:
                        break;
                    case 41: {
                        startExpr(EXPR, EXPR_OP);
                        return OP_ASSIGN;
                    }
                    // fall through
                    case 120:
                        break;
                    case 42: {
                        return STRINGLIT;
                    }
                    // fall through
                    case 121:
                        break;
                    case 43: {
                        return COMMENT;
                    }
                    // fall through
                    case 122:
                        break;
                    case 44: {
                        yybegin(MACROLINE);
                        macroLines = 0;
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 123:
                        break;
                    case 45: {
                        return MACRO_NAME;
                    }
                    // fall through
                    case 124:
                        break;
                    case 46: {
                        yybegin(MACROWAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 125:
                        break;
                    case 47: {
                        return MACRO_LINE;
                    }
                    // fall through
                    case 126:
                        break;
                    case 48: {
                        return handleMacroLineEol(this);
                    }
                    // fall through
                    case 127:
                        break;
                    case 49: {
                        yybegin(ASSIGNMENT);
                        eatOneWhitespace = true;
                        yypushback(pushbackAssignment(yytext()));
                        return SYMBOLDEF;
                    }
                    // fall through
                    case 128:
                        break;
                    case 50: {
                        yybegin(INSTRPART);
                        eatOneWhitespace = false;
                        yypushback(pushbackLabelColons(yytext()));
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 129:
                        break;
                    case 51: {
                        yybegin(INSTRPART);
                        yypushback(pushbackLabelColons(yytext()));
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 130:
                        break;
                    case 52: {
                        return OPSIZE_BS;
                    }
                    // fall through
                    case 131:
                        break;
                    case 53: {
                        return OPSIZE_W;
                    }
                    // fall through
                    case 132:
                        break;
                    case 54: {
                        return OPSIZE_L;
                    }
                    // fall through
                    case 133:
                        break;
                    case 55: {
                        yybegin(exprOpState);
                        return AREG;
                    }
                    // fall through
                    case 134:
                        break;
                    case 56: {
                        yybegin(exprOpState);
                        return REG_SP;
                    }
                    // fall through
                    case 135:
                        break;
                    case 57: {
                        yybegin(exprOpState);
                        return DREG;
                    }
                    // fall through
                    case 136:
                        break;
                    case 58: {
                        yybegin(exprOpState);
                        return REG_SR;
                    }
                    // fall through
                    case 137:
                        break;
                    case 59: {
                        yybegin(exprOpState);
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 138:
                        break;
                    case 60: {
                        yybegin(exprOpState);
                        return BINARY;
                    }
                    // fall through
                    case 139:
                        break;
                    case 61: {
                        yybegin(exprOpState);
                        return OCTAL;
                    }
                    // fall through
                    case 140:
                        break;
                    case 62: {
                        yybegin(exprOpState);
                        return STRINGLIT;
                    }
                    // fall through
                    case 141:
                        break;
                    case 63: {
                        yybegin(exprOpState);
                        return PC;
                    }
                    // fall through
                    case 142:
                        break;
                    case 64: {
                        yybegin(exprState);
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 143:
                        break;
                    case 65: {
                        yybegin(exprState);
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 144:
                        break;
                    case 66: {
                        yybegin(exprState);
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 145:
                        break;
                    case 67: {
                        yybegin(exprState);
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 146:
                        break;
                    case 68: {
                        yybegin(exprState);
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 147:
                        break;
                    case 69: {
                        yybegin(exprState);
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 148:
                        break;
                    case 70: {
                        yybegin(exprState);
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 149:
                        break;
                    case 71: {
                        yybegin(INSTRPART);
                        yypushback(pushbackLabelColons(yytext()));
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 150:
                        break;
                    case 72: {
                        yybegin(exprOpState);
                        return REG_USP;
                    }
                    // fall through
                    case 151:
                        break;
                    case 73: {
                        yybegin(exprOpState);
                        return REG_CCR;
                    }
                    // fall through
                    case 152:
                        break;
                    case 74: {
                        yybegin(exprOpState);
                        return REG_VBR;
                    }
                    // fall through
                    case 153:
                        break;
                    case 75: {
                        startExpr(EXPR, EXPR_OP);
                        return EQU;
                    }
                    // fall through
                    case 154:
                        break;
                    case 76: {
                        yybegin(MACRODEF);
                        return MACRO_TAG;
                    }
                    // fall through
                    case 155:
                        break;
                    case 77: {
                        return MACRO_TAG;
                    }
                    // fall through
                    case 156:
                        break;
                    case 78: {
                        yybegin(MACROTERMINATION);
                        return MACRO_END_TAG;
                    }
                    // fall through
                    case 157:
                        break;
                    case 79: {
                        yybegin(MACRODEF);
                        yypushback(pushbackAfterFirstToken(yytext()));
                        return MACRO_NAME;
                    }
                    // fall through
                    case 158:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
