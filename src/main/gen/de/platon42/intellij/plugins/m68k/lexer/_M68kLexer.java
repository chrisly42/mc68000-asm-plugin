/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.platon42.intellij.plugins.m68k.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.platon42.intellij.plugins.m68k.lexer.LexerUtil.*;
import static de.platon42.intellij.plugins.m68k.psi.M68kTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_M68kLexer.flex</tt>
 */
public class _M68kLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NOSOL = 2;
    public static final int INSTRPART = 4;
    public static final int ASMINSTR = 6;
    public static final int ASMOPS = 8;
    public static final int ASMOPS_OP = 10;
    public static final int ASSIGNMENT = 12;
    public static final int EXPR = 14;
    public static final int EXPR_OP = 16;
    public static final int MACROCALL = 18;
    public static final int WAITEOL = 20;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 14464 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                    "\53\4\14\1\54\12\11\1\55\u0381\11");

    /* The ZZ_CMAP_Y table has 2944 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\7" +
                    "\13\1\15\24\13\1\16\1\17\1\20\10\1\1\21\1\22\1\13\1\23\4\13\1\24\10\13\1\25" +
                    "\12\13\1\26\1\13\1\27\1\26\1\13\1\30\4\1\1\13\1\31\1\32\2\1\2\13\1\31\1\1" +
                    "\1\33\1\26\5\13\1\34\1\35\1\36\1\1\1\37\1\13\1\1\1\40\5\13\1\41\1\42\1\43" +
                    "\1\13\1\31\1\44\1\13\1\45\1\46\1\1\1\13\1\47\4\1\1\13\1\50\4\1\1\51\2\13\1" +
                    "\52\1\1\1\53\1\54\1\26\1\55\1\56\1\57\1\60\1\61\1\62\1\54\1\17\1\63\1\56\1" +
                    "\57\1\64\1\1\1\65\1\66\1\67\1\70\1\23\1\57\1\71\1\1\1\72\1\54\1\73\1\74\1" +
                    "\56\1\57\1\71\1\1\1\62\1\54\1\42\1\75\1\76\1\77\1\100\1\1\1\72\1\66\1\1\1" +
                    "\101\1\37\1\57\1\52\1\1\1\102\1\54\1\1\1\103\1\37\1\57\1\104\1\1\1\61\1\54" +
                    "\1\105\1\101\1\37\1\13\1\106\1\61\1\107\1\54\1\110\1\111\1\112\1\13\1\113" +
                    "\1\114\1\1\1\66\1\1\1\26\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121\1\122" +
                    "\1\123\1\124\2\1\1\72\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2\13\1" +
                    "\31\1\130\1\116\1\131\1\132\1\133\1\134\1\116\2\13\1\135\2\13\1\136\24\13" +
                    "\1\137\1\140\2\13\1\137\2\13\1\141\1\142\1\14\3\13\1\142\3\13\1\31\2\1\1\13" +
                    "\1\1\5\13\1\143\1\26\45\13\1\144\1\13\1\145\1\31\4\13\1\31\1\146\1\147\1\17" +
                    "\1\13\1\17\1\13\1\17\1\147\1\72\3\13\1\150\1\1\1\151\1\116\2\1\1\116\5\13" +
                    "\1\30\1\152\1\13\1\153\4\13\1\41\1\13\1\154\2\1\1\66\1\13\1\155\1\156\2\13" +
                    "\1\157\1\13\1\100\1\116\2\1\1\13\1\114\3\13\1\156\2\1\2\116\1\160\5\1\1\111" +
                    "\2\13\1\150\1\161\1\116\2\1\1\162\1\13\1\163\1\43\2\13\1\41\1\1\2\13\1\150" +
                    "\1\1\1\164\1\43\1\13\1\155\1\47\5\1\1\165\1\166\14\13\4\1\21\13\1\143\2\13" +
                    "\1\143\1\167\1\13\1\155\3\13\1\170\1\171\1\172\1\126\1\171\1\173\1\1\1\174" +
                    "\2\1\1\175\1\1\1\176\1\1\1\126\6\1\1\177\1\200\1\201\1\202\1\203\3\1\1\204" +
                    "\147\1\2\13\1\154\2\13\1\154\10\13\1\205\1\206\2\13\1\135\3\13\1\207\1\1\1" +
                    "\13\1\114\4\210\4\1\1\130\35\1\1\211\2\1\1\212\1\26\4\13\1\213\1\26\4\13\1" +
                    "\136\1\111\1\13\1\155\1\26\4\13\1\154\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1" +
                    "\41\4\1\135\13\1\41\2\1\10\13\1\126\4\1\2\13\1\155\20\13\1\126\1\13\1\214" +
                    "\1\1\2\13\1\154\1\130\1\13\1\155\4\13\1\41\2\1\1\215\1\216\5\13\1\217\1\13" +
                    "\1\154\1\30\3\1\1\215\1\220\1\13\1\32\1\1\3\13\1\150\1\216\2\13\1\150\1\1" +
                    "\1\116\1\1\1\221\1\43\1\13\1\41\1\13\1\114\1\1\1\13\1\126\1\51\2\13\1\32\1" +
                    "\130\1\116\1\222\1\223\2\13\1\47\1\1\1\224\1\116\1\13\1\225\3\13\1\226\1\227" +
                    "\1\230\1\31\1\67\1\231\1\232\1\210\2\13\1\136\1\41\7\13\1\32\1\116\72\13\1" +
                    "\150\1\13\1\233\2\13\1\157\20\1\26\13\1\155\6\13\1\100\2\1\1\114\1\234\1\57" +
                    "\1\235\1\236\6\13\1\17\1\1\1\162\25\13\1\155\1\1\4\13\1\216\2\13\1\30\2\1" +
                    "\1\157\7\1\1\222\7\13\1\126\1\1\1\116\1\26\1\31\1\26\1\31\1\237\4\13\1\154" +
                    "\1\240\1\241\2\1\1\242\1\13\1\14\1\243\2\155\2\1\7\13\1\31\30\1\1\13\1\126" +
                    "\3\13\1\72\2\1\2\13\1\1\1\13\1\244\2\13\1\41\1\13\1\155\2\13\1\245\3\1\11" +
                    "\13\1\155\1\116\2\13\1\245\1\13\1\157\2\13\1\30\3\13\1\150\11\1\23\13\1\114" +
                    "\1\13\1\41\1\30\11\1\1\246\2\13\1\247\1\13\1\41\1\13\1\114\1\13\1\154\4\1" +
                    "\1\13\1\250\1\13\1\41\1\13\1\100\4\1\3\13\1\251\4\1\1\72\1\252\1\13\1\150" +
                    "\2\1\1\13\1\126\1\13\1\126\2\1\1\125\1\13\1\156\1\1\3\13\1\41\1\13\1\41\1" +
                    "\13\1\32\1\13\1\17\6\1\4\13\1\47\3\1\3\13\1\32\3\13\1\32\60\1\1\162\2\13\1" +
                    "\30\2\1\1\66\1\1\1\162\2\13\2\1\1\13\1\47\1\116\1\162\1\13\1\114\1\66\1\1" +
                    "\2\13\1\253\1\162\2\13\1\32\1\254\1\255\2\1\1\13\1\23\1\157\5\1\1\256\1\257" +
                    "\1\47\2\13\1\154\1\1\1\116\1\74\1\56\1\57\1\71\1\1\1\260\1\17\11\1\3\13\1" +
                    "\156\1\261\1\116\2\1\3\13\1\1\1\262\1\116\12\1\2\13\1\154\2\1\1\263\2\1\3" +
                    "\13\1\1\1\264\1\116\2\1\2\13\1\31\1\1\1\116\3\1\1\13\1\100\1\1\1\116\26\1" +
                    "\4\13\1\116\1\130\34\1\3\13\1\47\20\1\1\57\1\13\1\154\1\1\1\72\1\116\1\1\1" +
                    "\216\1\13\67\1\71\13\1\100\16\1\14\13\1\150\53\1\2\13\1\154\75\1\44\13\1\114" +
                    "\33\1\43\13\1\47\1\13\1\154\1\116\6\1\1\13\1\155\1\1\3\13\1\1\1\150\1\116" +
                    "\1\162\1\265\1\13\67\1\4\13\1\156\1\72\3\1\1\162\4\1\1\72\1\1\76\13\1\126" +
                    "\1\1\57\13\1\32\20\1\1\17\77\1\6\13\1\31\1\126\1\47\1\100\66\1\5\13\1\222" +
                    "\3\13\1\147\1\266\1\267\1\270\3\13\1\271\1\272\1\13\1\273\1\274\1\37\24\13" +
                    "\1\275\1\13\1\37\1\136\1\13\1\136\1\13\1\222\1\13\1\222\1\154\1\13\1\154\1" +
                    "\13\1\57\1\13\1\57\1\13\1\276\3\277\14\13\1\156\3\1\4\13\1\150\1\116\112\1" +
                    "\1\270\1\13\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\157\1\307\1\157\24" +
                    "\1\55\13\1\114\2\1\103\13\1\156\15\13\1\155\150\13\1\17\25\1\41\13\1\155\36" +
                    "\1");

    /* The ZZ_CMAP_A table has 3200 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\55\1\44\1\51\1\24\1\32\1\62\1\43\1\53\1\54" +
                    "\1\61\1\57\1\47\1\60\1\22\1\64\2\33\6\6\2\37\1\23\1\50\1\45\1\21\1\46\1\0" +
                    "\1\41\1\5\1\71\1\65\1\11\1\15\6\12\1\31\3\12\1\10\1\16\1\67\1\7\1\20\1\17" +
                    "\1\70\1\30\3\12\1\0\1\25\1\0\1\52\1\13\1\42\1\34\1\27\1\66\1\35\1\40\1\36" +
                    "\5\12\1\31\3\12\1\10\1\16\1\67\1\26\1\20\1\17\1\70\1\30\3\12\1\0\1\63\1\0" +
                    "\1\56\6\0\1\1\12\0\1\4\11\0\1\12\12\0\1\12\4\0\1\12\5\0\27\12\1\0\27\12\1" +
                    "\7\2\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0\4\12\1" +
                    "\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\13\12\10\0\6\12" +
                    "\1\0\26\12\2\0\1\12\6\0\10\12\10\0\13\12\5\0\3\12\15\0\12\14\4\0\6\12\1\0" +
                    "\1\12\17\0\2\12\7\0\2\12\12\14\3\12\2\0\2\12\1\0\16\12\15\0\11\12\13\0\1\12" +
                    "\16\0\12\14\6\12\4\0\2\12\4\0\1\12\5\0\6\12\4\0\1\12\11\0\1\12\3\0\1\12\7" +
                    "\0\11\12\7\0\5\12\1\0\10\12\6\0\26\12\3\0\1\12\2\0\1\12\7\0\12\12\4\0\12\14" +
                    "\1\12\4\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12\20" +
                    "\0\1\12\15\0\2\12\1\0\1\12\5\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\17" +
                    "\0\4\12\1\0\1\12\7\0\12\14\2\0\3\12\20\0\11\12\1\0\2\12\1\0\2\12\1\0\5\12" +
                    "\3\0\1\12\2\0\1\12\30\0\1\12\13\0\10\12\2\0\1\12\3\0\1\12\1\0\6\12\3\0\3\12" +
                    "\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\13\0\10\12" +
                    "\1\0\2\12\10\0\3\12\5\0\1\12\4\0\10\12\1\0\6\12\1\0\5\12\3\0\1\12\3\0\2\12" +
                    "\15\0\13\12\2\0\1\12\6\0\3\12\10\0\1\12\12\0\6\12\5\0\22\12\3\0\10\12\1\0" +
                    "\11\12\1\0\1\12\2\0\7\12\11\0\1\12\1\0\2\12\14\0\12\14\7\0\2\12\1\0\1\12\2" +
                    "\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0" +
                    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0\1\12\11\0\12\14\2\0\14\12\1" +
                    "\0\24\12\13\0\5\12\22\0\7\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12" +
                    "\14\0\1\12\1\0\6\12\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12" +
                    "\1\0\1\12\1\0\4\12\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12" +
                    "\2\0\6\12\2\0\15\12\2\0\1\12\1\4\17\12\1\0\10\12\7\0\15\12\1\0\6\12\23\0\1" +
                    "\12\4\0\1\12\3\0\5\12\2\0\22\12\1\0\1\12\5\0\17\12\1\0\16\12\2\0\5\12\13\0" +
                    "\14\12\13\0\1\12\15\0\7\12\7\0\16\12\15\0\2\12\12\14\3\0\3\12\11\0\4\12\1" +
                    "\0\4\12\3\0\2\12\11\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1" +
                    "\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\13\4\15\0\2\1\5\0\1\4\17\0" +
                    "\1\4\1\0\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0" +
                    "\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\4\0" +
                    "\2\12\13\0\5\12\6\0\4\12\3\0\2\12\14\0\10\12\7\0\10\12\1\0\7\12\1\0\1\4\4" +
                    "\0\2\12\12\0\5\12\5\0\2\12\3\0\7\12\6\0\3\12\12\14\2\12\13\0\11\12\2\0\27" +
                    "\12\2\0\7\12\1\0\3\12\1\0\4\12\1\0\4\12\2\0\6\12\3\0\1\12\1\0\1\12\2\0\5\12" +
                    "\1\0\12\12\12\14\5\12\1\0\3\12\1\0\10\12\4\0\7\12\3\0\1\12\3\0\2\12\1\0\1" +
                    "\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\3\0\6\12\2\0\6\12\2\0\6" +
                    "\12\11\0\7\12\4\0\5\12\3\0\5\12\5\0\1\12\1\0\10\12\1\0\5\12\1\0\1\12\1\0\2" +
                    "\12\1\0\2\12\1\0\12\12\6\0\12\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14" +
                    "\12\1\0\16\12\1\0\2\12\1\0\2\12\1\0\10\12\6\0\4\12\4\0\16\12\2\0\1\12\1\0" +
                    "\14\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\3\12\1" +
                    "\0\12\12\3\0\1\12\12\0\4\12\13\0\12\14\1\12\1\0\1\12\3\0\7\12\1\0\1\12\1\0" +
                    "\4\12\1\0\17\12\1\0\2\12\14\0\3\12\7\0\4\12\11\0\2\12\1\0\1\12\20\0\4\12\10" +
                    "\0\1\12\13\0\10\12\5\0\3\12\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12" +
                    "\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\14\12\1\0\4\12\1\0\5\12" +
                    "\1\0\1\12\3\0\14\12\2\0\13\12\1\0\10\12\2\0\22\14\1\0\2\12\1\0\1\12\2\0\1" +
                    "\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1" +
                    "\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12" +
                    "\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12" +
                    "\1\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\13\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6" +
                    "\1\2\1\7\1\10\1\1\1\11\2\12\1\7\1\10" +
                    "\1\13\1\14\1\1\1\15\1\16\5\15\6\1\1\17" +
                    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\1\30\2\15\1\31\1\32\1\31\1\33\1\34\1\35" +
                    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45" +
                    "\1\46\1\47\1\42\1\50\2\1\1\51\1\52\1\53" +
                    "\6\1\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
                    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72" +
                    "\1\65\1\73\1\74\1\12\4\74\1\0\1\75\1\4" +
                    "\2\76\3\0\1\77\1\100\1\101\1\102\1\103\1\104" +
                    "\1\105\1\15\1\106\1\107\1\110\2\0\1\111\4\0" +
                    "\2\15\1\32\1\77\1\100\1\101\1\112\1\113\1\114" +
                    "\1\115\1\116\1\117\1\120\2\0\1\121\1\122\1\123" +
                    "\2\0\1\124\4\0\1\56\1\125\1\126\1\127\1\130" +
                    "\1\131\1\132\1\133\1\0\1\74\1\0\1\74\1\0" +
                    "\1\74\1\0\1\74\2\0\1\4\1\76\1\7\1\134" +
                    "\1\135\1\136\1\137\1\0\1\74\6\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[193];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196" +
                    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u027e\0\u02b8\0\u02f2\0\u032c" +
                    "\0\u0366\0\u03a0\0\u027e\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2" +
                    "\0\u04fc\0\u027e\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658" +
                    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828" +
                    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u027e\0\u027e\0\u027e" +
                    "\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u0984" +
                    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u027e\0\u0aa6\0\u0ae0\0\u027e" +
                    "\0\u027e\0\u027e\0\u027e\0\u0b1a\0\u027e\0\u027e\0\u027e\0\u027e" +
                    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u027e\0\u0c76\0\u0cb0" +
                    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u027e\0\u027e" +
                    "\0\u0e46\0\u027e\0\u0e80\0\u0eba\0\u027e\0\u027e\0\u027e\0\u0ef4" +
                    "\0\u027e\0\u027e\0\u027e\0\u027e\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc" +
                    "\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172" +
                    "\0\u11ac\0\u11e6\0\u1220\0\u11ac\0\u125a\0\u027e\0\u027e\0\u027e" +
                    "\0\u07b4\0\u07b4\0\u07b4\0\u07b4\0\u1294\0\u0828\0\u0862\0\u089c" +
                    "\0\u08d6\0\u12ce\0\u027e\0\u0910\0\u1308\0\u094a\0\u1342\0\u137c" +
                    "\0\u13b6\0\u027e\0\u09f8\0\u09f8\0\u09f8\0\u027e\0\u027e\0\u027e" +
                    "\0\u027e\0\u027e\0\u027e\0\u027e\0\u13f0\0\u142a\0\u0cea\0\u0d24" +
                    "\0\u0d5e\0\u0d98\0\u1464\0\u027e\0\u0dd2\0\u149e\0\u0e0c\0\u14d8" +
                    "\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e\0\u027e" +
                    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8" +
                    "\0\u16e2\0\u171c\0\u027e\0\u027e\0\u027e\0\u07b4\0\u07b4\0\u07b4" +
                    "\0\u027e\0\u1756\0\u027e\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878" +
                    "\0\u1138";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[193];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\14\2\15\1\16\1\17\1\20\1\14\5\20\1\14" +
                    "\4\20\1\14\1\21\3\14\4\20\2\14\3\20\1\14" +
                    "\1\20\7\14\2\22\7\14\1\22\3\14\5\20\1\14" +
                    "\2\23\1\24\1\25\1\26\1\14\4\26\1\27\1\14" +
                    "\4\26\1\14\1\30\3\14\4\26\2\14\3\26\1\14" +
                    "\1\26\7\14\2\31\7\14\1\31\3\14\5\26\1\14" +
                    "\2\32\1\33\1\25\1\34\1\14\4\34\1\35\1\14" +
                    "\4\34\5\14\4\34\2\14\3\34\1\14\1\34\7\14" +
                    "\1\36\14\14\5\34\1\14\2\32\1\33\1\37\15\14" +
                    "\1\40\25\14\1\36\22\14\2\32\1\33\1\25\1\41" +
                    "\1\42\1\43\1\44\1\45\2\46\1\14\2\46\1\47" +
                    "\1\46\1\14\1\46\1\14\1\50\1\14\1\43\3\46" +
                    "\1\51\1\42\1\41\1\45\1\46\1\42\1\46\1\52" +
                    "\1\53\1\54\1\55\2\14\1\56\1\36\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\3\14" +
                    "\2\70\1\46\1\71\1\46\1\14\2\32\1\33\1\25" +
                    "\1\72\1\14\5\72\1\14\4\72\1\73\1\74\3\14" +
                    "\4\72\1\75\1\14\3\72\1\14\1\72\4\14\1\76" +
                    "\1\77\1\100\1\36\1\14\1\101\1\102\1\103\1\104" +
                    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\5\72" +
                    "\1\14\2\32\1\33\1\25\2\14\1\114\5\14\1\115" +
                    "\3\14\1\116\4\14\1\114\11\14\1\115\7\14\1\36" +
                    "\22\14\2\32\1\33\1\25\1\117\1\120\5\117\1\14" +
                    "\4\117\1\14\1\117\1\14\1\121\1\14\4\117\1\122" +
                    "\1\120\3\117\1\120\1\117\1\123\1\124\1\125\1\126" +
                    "\2\14\1\56\1\36\1\14\1\60\1\61\1\127\1\63" +
                    "\1\64\1\65\1\66\1\130\3\14\5\117\1\14\2\32" +
                    "\1\33\1\25\14\14\1\131\10\14\1\132\12\14\1\133" +
                    "\1\134\1\135\1\36\1\14\1\136\1\137\1\103\1\140" +
                    "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\5\14" +
                    "\1\150\1\151\1\32\1\33\1\25\35\150\1\152\1\153" +
                    "\1\154\1\155\1\150\1\56\1\36\21\150\1\14\2\32" +
                    "\1\33\66\14\74\0\1\15\73\0\1\17\71\0\1\156" +
                    "\14\20\1\157\1\0\1\160\1\161\1\0\4\20\1\0" +
                    "\6\20\24\0\5\20\5\0\1\162\1\0\5\162\1\0" +
                    "\4\162\5\0\4\162\2\0\3\162\1\0\1\162\24\0" +
                    "\5\162\1\22\3\0\66\22\2\0\1\23\73\0\1\25" +
                    "\72\0\1\26\1\27\4\26\2\27\4\26\1\0\1\163" +
                    "\1\160\1\164\1\0\4\26\1\0\1\27\3\26\1\27" +
                    "\1\26\24\0\5\26\5\0\14\27\2\0\1\160\1\164" +
                    "\1\0\4\27\1\0\6\27\24\0\5\27\5\0\1\165" +
                    "\1\0\5\165\1\0\4\165\5\0\4\165\2\0\3\165" +
                    "\1\0\1\165\24\0\5\165\1\31\3\0\66\31\2\0" +
                    "\1\32\74\0\1\34\1\35\4\34\2\35\4\34\1\0" +
                    "\1\163\3\0\4\34\1\0\1\35\3\34\1\35\1\34" +
                    "\24\0\5\34\5\0\14\35\5\0\4\35\1\0\6\35" +
                    "\24\0\5\35\1\36\3\0\66\36\4\0\1\37\113\0" +
                    "\2\166\1\167\1\170\45\0\1\46\1\171\12\46\3\0" +
                    "\1\46\1\0\4\46\1\0\1\171\5\46\24\0\5\46" +
                    "\6\0\1\42\24\0\1\42\3\0\1\42\37\0\3\46" +
                    "\1\171\10\46\3\0\1\46\1\0\4\46\1\0\6\46" +
                    "\24\0\2\46\1\172\2\46\5\0\14\46\3\0\1\46" +
                    "\1\0\4\46\1\0\6\46\24\0\2\173\3\46\5\0" +
                    "\1\46\1\174\12\46\3\0\1\46\1\0\4\46\1\0" +
                    "\1\174\5\46\24\0\5\46\5\0\14\46\3\0\1\46" +
                    "\1\0\4\46\1\0\6\46\24\0\5\46\5\0\2\46" +
                    "\1\175\11\46\3\0\1\46\1\0\1\175\3\46\1\0" +
                    "\6\46\24\0\5\46\6\0\1\176\20\0\1\176\3\0" +
                    "\6\176\25\0\1\176\36\0\1\177\44\0\1\200\24\0" +
                    "\1\200\36\0\25\201\1\202\14\201\1\203\27\201\25\204" +
                    "\1\205\15\204\1\203\26\204\25\206\1\207\16\206\1\203" +
                    "\25\206\5\0\14\46\3\0\1\46\1\0\4\46\1\0" +
                    "\6\46\24\0\2\210\3\46\5\0\14\46\3\0\1\46" +
                    "\1\0\1\46\1\211\2\46\1\0\6\46\24\0\4\46" +
                    "\1\211\5\0\14\72\3\0\1\72\1\0\4\72\1\0" +
                    "\6\72\24\0\5\72\21\0\1\212\55\0\14\72\3\0" +
                    "\1\72\1\0\2\213\1\214\1\215\1\0\6\72\24\0" +
                    "\5\72\21\0\1\216\23\0\1\217\1\220\44\0\1\221" +
                    "\24\0\1\222\44\0\1\220\132\0\1\223\72\0\1\224" +
                    "\72\0\1\75\22\0\1\225\22\0\1\225\47\0\1\226" +
                    "\60\0\14\117\1\0\1\117\1\0\6\117\1\0\6\117" +
                    "\24\0\5\117\6\0\1\120\24\0\1\120\3\0\1\120" +
                    "\40\0\1\227\20\0\1\227\3\0\6\227\25\0\1\227" +
                    "\36\0\1\230\44\0\1\231\24\0\1\231\36\0\25\232" +
                    "\1\233\14\232\1\234\27\232\25\235\1\236\15\235\1\234" +
                    "\26\235\25\237\1\240\16\237\1\234\25\237\21\0\1\241" +
                    "\71\0\1\242\23\0\1\243\1\244\44\0\1\245\24\0" +
                    "\1\246\44\0\1\244\132\0\1\247\72\0\1\250\72\0" +
                    "\1\132\5\0\2\150\3\0\42\150\2\0\21\150\2\152" +
                    "\3\251\20\152\1\252\14\152\1\150\4\152\2\251\21\152" +
                    "\2\153\3\253\20\153\1\254\15\153\1\150\3\153\2\253" +
                    "\21\153\2\154\3\255\20\154\1\256\16\154\1\150\2\154" +
                    "\2\255\21\154\2\155\3\257\20\155\1\260\20\155\1\150" +
                    "\2\257\21\155\4\0\1\156\2\0\1\261\5\0\1\262" +
                    "\3\0\1\157\4\0\1\261\11\0\1\262\35\0\1\157" +
                    "\110\0\1\263\71\0\1\264\53\0\14\162\2\0\1\264" +
                    "\2\0\4\162\1\0\6\162\24\0\5\162\1\265\3\0" +
                    "\66\265\5\0\14\165\2\0\1\264\2\0\4\165\1\0" +
                    "\6\165\24\0\5\165\5\0\3\46\1\266\10\46\3\0" +
                    "\1\46\1\0\4\46\1\0\6\46\24\0\5\46\1\201" +
                    "\3\0\66\201\1\204\3\0\66\204\1\206\3\0\66\206" +
                    "\5\0\14\46\3\0\1\46\1\0\4\46\1\0\6\46" +
                    "\24\0\2\46\1\267\2\46\5\0\14\46\3\0\1\46" +
                    "\1\0\4\46\1\0\6\46\24\0\2\46\1\270\2\46" +
                    "\20\0\1\271\70\0\1\271\52\0\1\232\3\0\66\232" +
                    "\1\235\3\0\66\235\1\237\3\0\66\237\25\251\1\272" +
                    "\14\251\1\273\27\251\1\152\1\150\2\0\1\251\42\152" +
                    "\2\251\21\152\25\253\1\274\15\253\1\273\26\253\1\153" +
                    "\1\150\2\0\1\253\42\153\2\253\21\153\25\255\1\275" +
                    "\16\255\1\273\25\255\1\154\1\150\2\0\1\255\42\154" +
                    "\2\255\21\154\25\257\1\276\20\257\1\273\23\257\1\155" +
                    "\1\150\2\0\1\257\42\155\2\257\21\155\15\0\1\277" +
                    "\22\0\1\277\47\0\1\300\53\0\1\251\3\0\66\251" +
                    "\1\253\3\0\66\253\1\255\3\0\66\255\1\257\3\0" +
                    "\66\257\20\0\1\301\70\0\1\301\52\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[6322];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\13\0\2\11\5\1\1\11\6\1\1\11\23\1\12\11" +
                    "\5\1\1\11\2\1\4\11\1\1\4\11\5\1\1\11" +
                    "\10\1\2\11\1\1\1\11\2\1\3\11\1\1\4\11" +
                    "\11\1\1\0\4\1\3\0\3\11\10\1\2\0\1\11" +
                    "\4\0\2\1\1\11\3\1\7\11\2\0\3\1\2\0" +
                    "\1\11\4\0\10\11\1\0\1\1\1\0\1\1\1\0" +
                    "\1\1\1\0\1\1\2\0\3\11\3\1\1\11\1\0" +
                    "\1\11\6\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[193];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _M68kLexer() {
        this((java.io.Reader) null);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _M68kLexer(java.io.Reader in) {
        zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 96:
                        break;
                    case 2: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 97:
                        break;
                    case 3: {
                        yybegin(NOSOL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 98:
                        break;
                    case 4: {
                        yybegin(INSTRPART);
                        return GLOBAL_LABEL_DEF;
                    }
                    // fall through
                    case 99:
                        break;
                    case 5: {
                        return COMMENT;
                    }
                    // fall through
                    case 100:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 101:
                        break;
                    case 7: {
                        if (isAsmMnemonicWithSize(yytext())) {
                            yybegin(ASMINSTR);
                            yypushback(2);
                            return MNEMONIC;
                        }
                        if (isAsmMnemonic(yytext())) {
                            yybegin(ASMINSTR);
                            return MNEMONIC;
                        }
                        if (isDataDirective(yytext())) {
                            yybegin(EXPR);
                            return DATA_DIRECTIVE;
                        }
                        if (isOtherDirective(yytext())) {
                            yybegin(EXPR);
                            return OTHER_DIRECTIVE;
                        }
                        yybegin(MACROCALL);
                        return MACRO_INVOKATION;
                    }
                    // fall through
                    case 102:
                        break;
                    case 8: {
                        yybegin(MACROCALL);
                        return MACRO_INVOKATION;
                    }
                    // fall through
                    case 103:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return COMMENT;
                    }
                    // fall through
                    case 104:
                        break;
                    case 10: {
                        yybegin(YYINITIAL);
                        return EOL;
                    }
                    // fall through
                    case 105:
                        break;
                    case 11: {
                        yybegin(WAITEOL);
                        return COMMENT;
                    }
                    // fall through
                    case 106:
                        break;
                    case 12: {
                        yybegin(ASMOPS);
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 107:
                        break;
                    case 13: {
                        yybegin(ASMOPS_OP);
                        return SYMBOL;
                    }
                    // fall through
                    case 108:
                        break;
                    case 14: {
                        yybegin(ASMOPS_OP);
                        return DECIMAL;
                    }
                    // fall through
                    case 109:
                        break;
                    case 15: {
                        return SEPARATOR;
                    }
                    // fall through
                    case 110:
                        break;
                    case 16: {
                        return HASH;
                    }
                    // fall through
                    case 111:
                        break;
                    case 17: {
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 112:
                        break;
                    case 18: {
                        return ROUND_L;
                    }
                    // fall through
                    case 113:
                        break;
                    case 19: {
                        yybegin(ASMOPS_OP);
                        return ROUND_R;
                    }
                    // fall through
                    case 114:
                        break;
                    case 20: {
                        return OP_UNARY_NOT;
                    }
                    // fall through
                    case 115:
                        break;
                    case 21: {
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 116:
                        break;
                    case 22: {
                        return OP_PLUS;
                    }
                    // fall through
                    case 117:
                        break;
                    case 23: {
                        return OP_MINUS;
                    }
                    // fall through
                    case 118:
                        break;
                    case 24: {
                        yybegin(ASMOPS_OP);
                        return CURRENT_PC_SYMBOL;
                    }
                    // fall through
                    case 119:
                        break;
                    case 25: {
                        return SYMBOL;
                    }
                    // fall through
                    case 120:
                        break;
                    case 26: {
                        yybegin(ASMOPS);
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 121:
                        break;
                    case 27: {
                        yybegin(ASMOPS);
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 122:
                        break;
                    case 28: {
                        yybegin(ASMOPS);
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 123:
                        break;
                    case 29: {
                        yybegin(ASMOPS);
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 124:
                        break;
                    case 30: {
                        yybegin(ASMOPS);
                        return SEPARATOR;
                    }
                    // fall through
                    case 125:
                        break;
                    case 31: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 126:
                        break;
                    case 32: {
                        yybegin(ASMOPS);
                        return ROUND_L;
                    }
                    // fall through
                    case 127:
                        break;
                    case 33: {
                        return ROUND_R;
                    }
                    // fall through
                    case 128:
                        break;
                    case 34: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 129:
                        break;
                    case 35: {
                        yybegin(ASMOPS);
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 130:
                        break;
                    case 36: {
                        yybegin(ASMOPS);
                        return OP_PLUS;
                    }
                    // fall through
                    case 131:
                        break;
                    case 37: {
                        yybegin(ASMOPS);
                        return OP_MINUS;
                    }
                    // fall through
                    case 132:
                        break;
                    case 38: {
                        yybegin(ASMOPS);
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 133:
                        break;
                    case 39: {
                        yybegin(ASMOPS);
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 134:
                        break;
                    case 40: {
                        yybegin(ASMOPS);
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 135:
                        break;
                    case 41: {
                        yybegin(EXPR);
                        return OP_ASSIGN;
                    }
                    // fall through
                    case 136:
                        break;
                    case 42: {
                        yybegin(EXPR_OP);
                        return SYMBOL;
                    }
                    // fall through
                    case 137:
                        break;
                    case 43: {
                        yybegin(EXPR_OP);
                        return DECIMAL;
                    }
                    // fall through
                    case 138:
                        break;
                    case 44: {
                        yybegin(EXPR_OP);
                        return ROUND_R;
                    }
                    // fall through
                    case 139:
                        break;
                    case 45: {
                        yybegin(EXPR_OP);
                        return CURRENT_PC_SYMBOL;
                    }
                    // fall through
                    case 140:
                        break;
                    case 46: {
                        yybegin(EXPR);
                        return OP_CMP_EQ;
                    }
                    // fall through
                    case 141:
                        break;
                    case 47: {
                        yybegin(EXPR);
                        return OP_AR_MOD;
                    }
                    // fall through
                    case 142:
                        break;
                    case 48: {
                        yybegin(EXPR);
                        return OP_CMP_LT;
                    }
                    // fall through
                    case 143:
                        break;
                    case 49: {
                        yybegin(EXPR);
                        return OP_CMP_GT;
                    }
                    // fall through
                    case 144:
                        break;
                    case 50: {
                        yybegin(EXPR);
                        return SEPARATOR;
                    }
                    // fall through
                    case 145:
                        break;
                    case 51: {
                        yybegin(EXPR);
                        return OP_BITWISE_XOR;
                    }
                    // fall through
                    case 146:
                        break;
                    case 52: {
                        yybegin(EXPR);
                        return ROUND_L;
                    }
                    // fall through
                    case 147:
                        break;
                    case 53: {
                        yybegin(EXPR);
                        return OP_BITWISE_OR;
                    }
                    // fall through
                    case 148:
                        break;
                    case 54: {
                        yybegin(EXPR);
                        return OP_UNARY_COMPL;
                    }
                    // fall through
                    case 149:
                        break;
                    case 55: {
                        yybegin(EXPR);
                        return OP_PLUS;
                    }
                    // fall through
                    case 150:
                        break;
                    case 56: {
                        yybegin(EXPR);
                        return OP_MINUS;
                    }
                    // fall through
                    case 151:
                        break;
                    case 57: {
                        yybegin(EXPR);
                        return OP_AR_MUL;
                    }
                    // fall through
                    case 152:
                        break;
                    case 58: {
                        yybegin(EXPR);
                        return OP_BITWISE_AND;
                    }
                    // fall through
                    case 153:
                        break;
                    case 59: {
                        yybegin(EXPR);
                        return OP_AR_DIV;
                    }
                    // fall through
                    case 154:
                        break;
                    case 60: {
                        return STRINGLIT;
                    }
                    // fall through
                    case 155:
                        break;
                    case 61: {
                        yybegin(ASSIGNMENT);
                        yypushback(pushbackAssignment(yytext()));
                        return SYMBOLDEF;
                    }
                    // fall through
                    case 156:
                        break;
                    case 62: {
                        yybegin(INSTRPART);
                        return LOCAL_LABEL_DEF;
                    }
                    // fall through
                    case 157:
                        break;
                    case 63: {
                        return OPSIZE_BS;
                    }
                    // fall through
                    case 158:
                        break;
                    case 64: {
                        return OPSIZE_W;
                    }
                    // fall through
                    case 159:
                        break;
                    case 65: {
                        return OPSIZE_L;
                    }
                    // fall through
                    case 160:
                        break;
                    case 66: {
                        yybegin(ASMOPS_OP);
                        return AREG;
                    }
                    // fall through
                    case 161:
                        break;
                    case 67: {
                        yybegin(ASMOPS_OP);
                        return REG_SR;
                    }
                    // fall through
                    case 162:
                        break;
                    case 68: {
                        yybegin(ASMOPS_OP);
                        return PC;
                    }
                    // fall through
                    case 163:
                        break;
                    case 69: {
                        yybegin(ASMOPS_OP);
                        return DREG;
                    }
                    // fall through
                    case 164:
                        break;
                    case 70: {
                        yybegin(ASMOPS_OP);
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 165:
                        break;
                    case 71: {
                        yybegin(ASMOPS_OP);
                        return BINARY;
                    }
                    // fall through
                    case 166:
                        break;
                    case 72: {
                        yybegin(ASMOPS_OP);
                        return OCTAL;
                    }
                    // fall through
                    case 167:
                        break;
                    case 73: {
                        yybegin(ASMOPS_OP);
                        return STRINGLIT;
                    }
                    // fall through
                    case 168:
                        break;
                    case 74: {
                        yybegin(ASMOPS);
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 169:
                        break;
                    case 75: {
                        yybegin(ASMOPS);
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 170:
                        break;
                    case 76: {
                        yybegin(ASMOPS);
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 171:
                        break;
                    case 77: {
                        yybegin(ASMOPS);
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 172:
                        break;
                    case 78: {
                        yybegin(ASMOPS);
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 173:
                        break;
                    case 79: {
                        yybegin(ASMOPS);
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 174:
                        break;
                    case 80: {
                        yybegin(ASMOPS);
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 175:
                        break;
                    case 81: {
                        yybegin(EXPR_OP);
                        return HEXADECIMAL;
                    }
                    // fall through
                    case 176:
                        break;
                    case 82: {
                        yybegin(EXPR_OP);
                        return BINARY;
                    }
                    // fall through
                    case 177:
                        break;
                    case 83: {
                        yybegin(EXPR_OP);
                        return OCTAL;
                    }
                    // fall through
                    case 178:
                        break;
                    case 84: {
                        yybegin(EXPR_OP);
                        return STRINGLIT;
                    }
                    // fall through
                    case 179:
                        break;
                    case 85: {
                        yybegin(EXPR);
                        return OP_CMP_LT_EQ;
                    }
                    // fall through
                    case 180:
                        break;
                    case 86: {
                        yybegin(EXPR);
                        return OP_AR_SHIFT_L;
                    }
                    // fall through
                    case 181:
                        break;
                    case 87: {
                        yybegin(EXPR);
                        return OP_CMP_NOT_EQ;
                    }
                    // fall through
                    case 182:
                        break;
                    case 88: {
                        yybegin(EXPR);
                        return OP_CMP_GT_EQ;
                    }
                    // fall through
                    case 183:
                        break;
                    case 89: {
                        yybegin(EXPR);
                        return OP_AR_SHIFT_R;
                    }
                    // fall through
                    case 184:
                        break;
                    case 90: {
                        yybegin(EXPR);
                        return OP_LOGICAL_AND;
                    }
                    // fall through
                    case 185:
                        break;
                    case 91: {
                        yybegin(EXPR);
                        return OP_LOGICAL_OR;
                    }
                    // fall through
                    case 186:
                        break;
                    case 92: {
                        yybegin(ASMOPS_OP);
                        return REG_USP;
                    }
                    // fall through
                    case 187:
                        break;
                    case 93: {
                        yybegin(ASMOPS_OP);
                        return REG_CCR;
                    }
                    // fall through
                    case 188:
                        break;
                    case 94: {
                        yybegin(ASMOPS_OP);
                        return REG_VBR;
                    }
                    // fall through
                    case 189:
                        break;
                    case 95: {
                        yybegin(EXPR);
                        return EQU;
                    }
                    // fall through
                    case 190:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
